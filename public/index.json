[{"content":" B+树是一种树数据结构，广泛应用于数据库和文件系统中，用于高效地存储和检索数据。B+树是B树的一种变体，它在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。\n基本B树 B树基本结构 B树的每个节点可以包含多个键值对和指向子节点的指针。B树的每个节点通常包含以下内容：\n键（Key）：用于排序和导航的值。 数据记录（Data Record）：实际存储的数据或指向数据记录的指针。 子节点指针（Child Pointers）：指向子节点的指针。 一个d阶b树中每个节点最多包含2d个键和2d+1个指针，最少包含d个键和d+1个指针。B树在磁盘存储中非常高效，因为每个节点可以存储多个的键值对，减少了磁盘I/O操作的次数。 B树特点 平衡性。B树是一种平衡树，所有叶子节点都在同一层。这意味着从根节点到任意叶子节点的路径长度是相同的，确保了查询操作的时间复杂度为O(log n)。 多路搜索。B树的每个节点可以包含多个键和指针，因此它是一种多路搜索树。这使得B树在磁盘存储中非常高效，因为每个节点可以存储更多的键值对，减少了磁盘I/O操作的次数，I/O操作次数不超过logd(n)(d为B树的阶数）。 插入和删除操作。B树的插入和删除操作通常需要维护树的平衡性。插入操作可能会导致节点分裂，删除操作可能会导致节点合并。这些操作确保了树的高度保持在合理范围内，从而保持查询效率。 B树的操作 查询操作。B树的查询操作类似于二叉搜索树的查询操作，但B树是多路搜索树，因此需要遍历多个子节点。查询操作的时间复杂度为O(log n)。 插入操作。插入操作首先需要找到合适的叶子节点来插入新键值对。如果叶子节点已满，则需要进行节点分裂操作。节点分裂操作将节点分成两个节点，并将中间键提升到父节点中。插入操作的时间复杂度为O(log n)。 删除操作。删除操作首先需要找到包含要删除键的节点。如果删除键后节点中的键数量不足，则需要进行节点合并操作。节点合并操作将相邻节点合并成一个节点，并将多余的键提升到父节点中。删除操作的时间复杂度为O(log n)。 B树变种B+树 B+树相对于B树的变化：\n存储位置：B+树的内部节点仅包含键和子节点指针，实际的数据记录存储在叶子节点中。叶子节点之间通过指针连接，形成一个有序链表。 查询范围：B+树相对B树在顺序查找方面更加高效，因为叶子节点通过指针连接成一个有序链表。只需要从起始叶子节点开始遍历链表，直到找到结束叶子节点即可。 空间效率：相比B树，B+树的内部节点仅包含键和子节点指针，所有的数据记录均在叶子节点中，这使得内部节点的空间利用率更高。 查询效率：相比与B树，B+树将叶子节点通过指针连接，使得B+树在对文件进行顺序处理时拥有远超B树的效率。 B+树在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询，因此在现代数据存储和检索系统中更为常见。B+树通过将数据存储在叶子节点中，并使用内部节点进行导航，实现了高效的查询、插入、删除和范围查询操作。B+树的平衡性和多路搜索特性使得它在处理大量数据时表现出色，是现代数据存储和检索系统中的重要数据结构。 ","permalink":"http://localhost:1313/posts/b+tree/","summary":"B+树介绍","title":"B+Tree"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"},{"content":" B+树是一种树数据结构，广泛应用于数据库和文件系统中，用于高效地存储和检索数据。B+树是B树的一种变体，它在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。\n基本B树 B树基本结构 B树的每个节点可以包含多个键值对和指向子节点的指针。B树的每个节点通常包含以下内容：\n键（Key）：用于排序和导航的值。 数据记录（Data Record）：实际存储的数据或指向数据记录的指针。 子节点指针（Child Pointers）：指向子节点的指针。 一个d阶b树中每个节点最多包含2d个键和2d+1个指针，最少包含d个键和d+1个指针。B树在磁盘存储中非常高效，因为每个节点可以存储多个的键值对，减少了磁盘I/O操作的次数。 B树特点 平衡性。B树是一种平衡树，所有叶子节点都在同一层。这意味着从根节点到任意叶子节点的路径长度是相同的，确保了查询操作的时间复杂度为O(log n)。 多路搜索。B树的每个节点可以包含多个键和指针，因此它是一种多路搜索树。这使得B树在磁盘存储中非常高效，因为每个节点可以存储更多的键值对，减少了磁盘I/O操作的次数，I/O操作次数不超过logd(n)(d为B树的阶数）。 插入和删除操作。B树的插入和删除操作通常需要维护树的平衡性。插入操作可能会导致节点分裂，删除操作可能会导致节点合并。这些操作确保了树的高度保持在合理范围内，从而保持查询效率。 B树的操作 查询操作。B树的查询操作类似于二叉搜索树的查询操作，但B树是多路搜索树，因此需要遍历多个子节点。查询操作的时间复杂度为O(log n)。 插入操作。插入操作首先需要找到合适的叶子节点来插入新键值对。如果叶子节点已满，则需要进行节点分裂操作。节点分裂操作将节点分成两个节点，并将中间键提升到父节点中。插入操作的时间复杂度为O(log n)。 删除操作。删除操作首先需要找到包含要删除键的节点。如果删除键后节点中的键数量不足，则需要进行节点合并操作。节点合并操作将相邻节点合并成一个节点，并将多余的键提升到父节点中。删除操作的时间复杂度为O(log n)。 B树变种B+树 B+树相对于B树的变化：\n存储位置：B+树的内部节点仅包含键和子节点指针，实际的数据记录存储在叶子节点中。叶子节点之间通过指针连接，形成一个有序链表。 查询范围：B+树相对B树在顺序查找方面更加高效，因为叶子节点通过指针连接成一个有序链表。只需要从起始叶子节点开始遍历链表，直到找到结束叶子节点即可。 空间效率：相比B树，B+树的内部节点仅包含键和子节点指针，所有的数据记录均在叶子节点中，这使得内部节点的空间利用率更高。 查询效率：相比与B树，B+树将叶子节点通过指针连接，使得B+树在对文件进行顺序处理时拥有远超B树的效率。 B+树在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询，因此在现代数据存储和检索系统中更为常见。B+树通过将数据存储在叶子节点中，并使用内部节点进行导航，实现了高效的查询、插入、删除和范围查询操作。B+树的平衡性和多路搜索特性使得它在处理大量数据时表现出色，是现代数据存储和检索系统中的重要数据结构。 ","permalink":"http://localhost:1313/posts/b+tree/","summary":"B+树介绍","title":"B+Tree"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"},{"content":" B+树是一种树数据结构，广泛应用于数据库和文件系统中，用于高效地存储和检索数据。B+树是B树的一种变体，它在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。\n基本B树 B树基本结构 B树的每个节点可以包含多个键值对和指向子节点的指针。B树的每个节点通常包含以下内容：\n键（Key）：用于排序和导航的值。 数据记录（Data Record）：实际存储的数据或指向数据记录的指针。 子节点指针（Child Pointers）：指向子节点的指针。 一个d阶b树中每个节点最多包含2d个键和2d+1个指针，最少包含d个键和d+1个指针。B树在磁盘存储中非常高效，因为每个节点可以存储多个的键值对，减少了磁盘I/O操作的次数。 B树特点 平衡性。B树是一种平衡树，所有叶子节点都在同一层。这意味着从根节点到任意叶子节点的路径长度是相同的，确保了查询操作的时间复杂度为O(log n)。 多路搜索。B树的每个节点可以包含多个键和指针，因此它是一种多路搜索树。这使得B树在磁盘存储中非常高效，因为每个节点可以存储更多的键值对，减少了磁盘I/O操作的次数，I/O操作次数不超过logd(n)(d为B树的阶数）。 插入和删除操作。B树的插入和删除操作通常需要维护树的平衡性。插入操作可能会导致节点分裂，删除操作可能会导致节点合并。这些操作确保了树的高度保持在合理范围内，从而保持查询效率。 B树的操作 查询操作。B树的查询操作类似于二叉搜索树的查询操作，但B树是多路搜索树，因此需要遍历多个子节点。查询操作的时间复杂度为O(log n)。 插入操作。插入操作首先需要找到合适的叶子节点来插入新键值对。如果叶子节点已满，则需要进行节点分裂操作。节点分裂操作将节点分成两个节点，并将中间键提升到父节点中。插入操作的时间复杂度为O(log n)。 删除操作。删除操作首先需要找到包含要删除键的节点。如果删除键后节点中的键数量不足，则需要进行节点合并操作。节点合并操作将相邻节点合并成一个节点，并将多余的键提升到父节点中。删除操作的时间复杂度为O(log n)。 B树变种B+树 B+树相对于B树的变化：\n存储位置：B+树的内部节点仅包含键和子节点指针，实际的数据记录存储在叶子节点中。叶子节点之间通过指针连接，形成一个有序链表。 查询范围：B+树相对B树在顺序查找方面更加高效，因为叶子节点通过指针连接成一个有序链表。只需要从起始叶子节点开始遍历链表，直到找到结束叶子节点即可。 空间效率：相比B树，B+树的内部节点仅包含键和子节点指针，所有的数据记录均在叶子节点中，这使得内部节点的空间利用率更高。 查询效率：相比与B树，B+树将叶子节点通过指针连接，使得B+树在对文件进行顺序处理时拥有远超B树的效率。 B+树在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询，因此在现代数据存储和检索系统中更为常见。B+树通过将数据存储在叶子节点中，并使用内部节点进行导航，实现了高效的查询、插入、删除和范围查询操作。B+树的平衡性和多路搜索特性使得它在处理大量数据时表现出色，是现代数据存储和检索系统中的重要数据结构。 ","permalink":"http://localhost:1313/posts/b+tree/","summary":"B+树介绍","title":"B+Tree"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"}]