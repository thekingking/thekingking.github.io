[{"content":" 前言 我是用的artalk搭建的评论系统，部署在我自己的服务器上，在本地部署成功后，由于GitHubPages的页面使用https访问，而服务器数据访问使用的是http，导致在GitHubPages界面上加载失败。\n我的解决方案：由于使用https需要ssl证书，获取ssl证书又需要域名，所以在阿里云上购买了一个便宜的域名。由于云服务提供商的ssl证书太贵了（我记得前几年还免费来着，晕），所以选择从Let\u0026rsquo;s Encrypt 上获取ssl证书（有效期为90天，需要定期更新，但是免费）。这时候又遇到问题了，由于我使用的是京东云的服务器，由于没有备案，https请求全被拦截了，现在又恰逢过年，没时间备案（同时我也不太想去搞，问东问西的，时间跨度也挺长）。评论系统搭建暂时搁置，后续可能会选择备案，或者选择购买国外的服务器搭建，或者看能否不用https，或者暂时就不搭建了，等以后再说，反正也没人看不是。\n总结：如果你有已备案的国内的服务器，并且有域名和ssl证书，那么下面可以看，否则就不用看了。更好的推荐是使用第三方提供的评论系统了。\n安装环境 Ubuntu22.04 京东云2h4g服务器 参考文献 【Artalk】一文教会你部署整合博客评论功能 官方文档 artalk安装 我选择docker安装，简单易用（刚好之后要学习go，用go安装过，但是存在问题，老实了）\n首先你需要在服务器上安装一个 Docker（这我就不详细介绍了，没有得小伙伴可以去网上搜搜）。\n然后新建一个文件夹用于存放 Artalk 文件（/root/artalk)，然后执行下面的命令，只需要修改中文提示的地方：\n# 安装artalk cd artalk docker run -d \\ --name artalk \\ -p 服务器端口:23366 \\ -v $(pwd)/data:/data \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -e \u0026#34;ATK_LOCALE=zh-CN\u0026#34; \\ -e \u0026#34;ATK_SITE_DEFAULT=站点名\u0026#34; \\ -e \u0026#34;ATK_SITE_URL=站点URL\u0026#34; \\ --network artalk \\ artalk/artalk-go # 创建管理员账户 docker exec -it artalk artalk admin 浏览器输入 http://站点URL 进入 Artalk 后台登录界面，剩下的看着需要修改就行。\n数据库安装 同样选用docker安装数据库，我选择使用mysql5.7的docker镜像来部署服务，将数据库和artalk部署在同一个docker网络下（因为artalk会访问数据库，artalk会自动初始化数据库，但是貌似需要自己手动创建数据库）\n# 创建mysql容器，和artalk部署在同一个网络下 docker run -d \\ --name mysql \\ -e MYSQL_ROOT_PASSWORD=YourPassword \\ -p 3306:3306 \\ -v $(pwd)/mysql:/mysql \\ --network artalk mysql:5.7 # 进入mysql中创建artalk数据库，注意创建数据库时字符，需要和artalk中相同 docker exec -it mysql mysql -uroot -p 最后在artalk的管理界面填写数据库信息就行，数据库地址就写数据库容器名称\n到现在已经可以使用了，但是仍未开启https，在https界面是加载不出使用http的评论系统的\n开启https 这是我当前选择的方案\n首先就是购买域名，ssl证书是和域名绑定的，没有域名就拿不到ssl证书 买了域名之后就是添加DNS解析（国内服务器可能还需要备案，真羡慕国外的服务器） DNS解析配置完毕就是获取ssl证书，云服务器提供商ssl证书太贵了，我选择使用Let\u0026rsquo;s Encrypt 提供的ssl证书 以下是ssl证书获取，我是通过DNS解析TXT通过的验证，并没有使用nginx（因为服务器没备案，通过域名的http请求都被拦截了，哭）\n# 安装certbot sudo apt update sudo apt install certbot # 使用DNS验证申请 sudo certbot certonly --manual --preferred-challenges dns -d 你的域名 # 按照提示在域名解析中添加TXT记录，确认添加成功后再按确认 构建之余 也是用过docker-compose搭建，这个确实简单点，这是我当时写的配置文件，后续使用这个创建过。由于mysql的docker已经创建了，所以没有添加，仅供参考。\nservices: artalk: container_name: artalk image: artalk/artalk-go restart: unless-stopped ports: - 8080:23366 volumes: - ./data:/data networks: - artalk environment: - TZ=Asia/Shanghai - ATK_LOCALE=zh-CN - ATK_SITE_DEFAULT=网站名称 - ATK_SITE_URL=网站URL - ATK_ADMIN_USERS_0_NAME=管理员名称 - ATK_ADMIN_USERS_0_EMAIL=邮箱地址 - ATK_ADMIN_USERS_0_PASSWORD=(bcrypt)$2y$10$HnxBjnRnYF4Teg7jqedNL.MBtRcmNkk.ZmRU1SecB.afXIz.uVd6q - ATK_ADMIN_USERS_0_BADGE_NAME=管理员 - ATK_ADMIN_USERS_0_BADGE_COLOR=#0083FF networks: artalk: external: true ","permalink":"http://localhost:1313/posts/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","summary":"评论系统搭建，服务器没备案，https访问被拦截，暂时搭建失败，仅供参考","title":"博客评论系统"},{"content":" 开发环境 Ubuntu22.04 京东云2h4g服务器 Hugo version: 0.141(下载的时候没注意，直接就下了最新版了) PaperMod version: 2025-01-22最新版本(git安装的) 相关文档 官方文档 Hugo中文文档 PaperMod GitHub官网 参考文章 Hugo PaperMod 主题精装修 我是如何建立自己的个人博客的？ Hugo-papermod主题的优化记录 PaperMod主题配置 开始 hugo安装 # 从github下载需要版本的hugo wget https://github.com/gohugoio/hugo/releases/download/v0.141.0/hugo_extended_0.141.0_Linux-64bit.tar.gz # 解压 tar -xvzf hugo_extended_0.141.0_Linux-64bit.tar.gz # 移动hugo到/usr/local/bin/ sudo mv hugo /usr/local/bin/ # 查看是否安装成功 hugo version 安装主题 我使用的是PaperMod主题，在PaperMod的基础上进行了一些魔改，参考这个网站，PaperMod下载按官网流程即可\n# 配置文件用yaml，别问为什么，都是这样推荐的，能用就行 hugo new site MyFreshWebsite --format yaml # replace MyFreshWebsite with name of your website cd MyFreshWebsite # 初始化git git init # 安装PaperMod git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 # 这部分应该是在git仓库里建了一个子仓库，方便从github更新PaperMod，我觉得没啥必要，更新的情况太少，能跑够用就行了，需要的话手动更新就行了 cd themes/PaperMod git pull cd ../.. git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --remote --merge # 这部分记不太清了，不搞明白有什么作用 hugo mod init YOUR_OWN_GIT_REPOSITORY 配置文件 新版配置文件名称默认为hugo.yaml\n参考的其他人的介绍的配置文件，这个注释较多就用这个了，请根据需要修改\n主页显示我用的profileMode，这个好看点，默认和文章界面重复了\n# 起始 URL（换成您自己的域名） baseURL: \u0026#39;https://hugo-start.pages.dev\u0026#39; # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 每页显示的文章数量 paginate: 5 # 主题名称 theme: PaperMod # 语言代码（zh-简体中文） languageCode: \u0026#39;zh\u0026#39; DefaultContentLanguage: \u0026#39;zh\u0026#39; # 是否有 CJK 语言（中-日-韩） hasCJKLanguage: true # 是否生成 robots.txt enableRobotsTXT: true # 是否构建草稿 buildDrafts: false # 是否构建未来的文章 buildFuture: false # 是否构建过期的文章 buildExpired: false # 是否启用 Emoji enableEmoji: true # 是否启用 Git 信息 enableGitInfo: false # Google Analytics ID googleAnalytics: \u0026#39;\u0026#39; # 压缩输出静态文件 minify: # 是否不压缩 XML 文件 disableXML: true minifyOutput: true # 全局配置 params: env: production # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 网站描述 description: \u0026#39;Hugo Start with PaperMod\u0026#39; # 网站关键词（大部分搜索引擎已放弃，可注释掉） # keywords: [Blog, Portfolio, PaperMod] # 网站作者 author: \u0026#39;Your Name\u0026#39; # 多个作者写法 # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # OpenGraph / Twitter Card 预览图片（/static 下面的文件名称） images: [\u0026#39;opengraph.webp\u0026#39;] # 日期格式 DateFormat: \u0026#39;2006-01-02\u0026#39; # 默认主题 defaultTheme: auto # dark, light # 是否启用主题切换按钮 disableThemeToggle: false # 是否启用阅读时间展示 ShowReadingTime: true # 是都启用分享按钮 ShowShareButtons: true ShowPostNavLinks: true # 是否启用面包屑导航 ShowBreadCrumbs: true # 是否显示代码复制按钮 ShowCodeCopyButtons: false # 是否显示字数统计 ShowWordCount: true # 是否在页面显示 RSS 按钮 ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false # 是否禁用首页滚动到顶部 disableScrollToTop: false # 是否启用评论系统 comments: false # 是否隐藏 Meta 信息 hidemeta: false # 是否隐藏文章摘要 hideSummary: false # 是否显示目录 showtoc: false # 是否默认展开文章目录 tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true # 网站 Favicon 图标相关信息 # 可在 https://realfavicongenerator.net/ 生成 # 将图片复制到 /static 目录下 # 然后修改下面代码中的文件名 favicon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon16x16: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon32x32: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; apple_touch_icon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; safari_pinned_tab: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; label: # 使用文本替代 Logo 标签 text: \u0026#39;Hugo Start\u0026#39; # 网站 Logo 图片（/static 下面的文件名称） icon: /apple-touch-icon.png # 图标高度 iconHeight: 35 # 主页展示模式 # 个人信息模式 profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#39;This is subtitle\u0026#39; imageUrl: \u0026#39;\u0026lt;img location\u0026gt;\u0026#39; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # 主页 - 信息模式（默认） homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to hugo start, this is a example of Hugo and PaperMod # 主页 - 信息模式 图标展示 socialIcons: # - name: twitter # url: \u0026#34;https://twitter.com/\u0026#34; # - name: stackoverflow # url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#39;https://github.com/DejavuMoe/hugo-start\u0026#39; - name: mastodon url: \u0026#39;https://sink.love/@dejavu\u0026#39; # 站长验证 analytics: google: SiteVerificationTag: \u0026#39;\u0026#39; bing: SiteVerificationTag: \u0026#39;\u0026#39; yandex: SiteVerificationTag: \u0026#39;\u0026#39; # 文章封面设置 cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page # 关联编辑 editPost: URL: \u0026#39;https://github.com/DejavuMoe/hugo-start/edit/master/content/posts\u0026#39; Text: \u0026#39;Edit on GitHub\u0026#39; # edit text appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#39;title\u0026#39;, \u0026#39;permalink\u0026#39;, \u0026#39;summary\u0026#39;, \u0026#39;content\u0026#39;] # 顶部导航栏 menu: main: - identifier: \u0026#39;首页\u0026#39; name: \u0026#39;首页\u0026#39; url: / weight: 1 - identifier: \u0026#39;分类\u0026#39; name: \u0026#39;分类\u0026#39; url: /categories/ weight: 10 - identifier: \u0026#39;标签\u0026#39; name: \u0026#39;标签\u0026#39; url: /tags/ weight: 20 - identifier: \u0026#39;仓库\u0026#39; name: \u0026#39;仓库\u0026#39; url: https://github.com/DejavuMoe/hugo-start weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai privacy: vimeo: disabled: true enableDNT: true simple: true twitter: disabled: true enableDNT: true # 是否启用添加“请勿跟踪” HTTP 头。 simple: true # 如果启用简单模式，将建立一个静态的、无 JS 版本的推文。 instagram: disabled: true simple: true youtube: disabled: true privacyEnhanced: true services: instagram: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 twitter: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 默认模板 文章创建时的默认模板，相对于config全局配置，这里是局部配置，控制文章显示的必要属性\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: true # 是否为草稿 author: [\u0026#34;tkk\u0026#34;] categories: [] tags: [] keywords: [] description: \u0026#34;\u0026#34; # 文章描述，与搜索优化相关 summary: \u0026#34;\u0026#34; # 文章简单描述，会展示在主页 weight: # 输入1可以顶置文章，用来给文章展示排序，不填就默认按时间排序 slug: \u0026#34;\u0026#34; comments: false autoNumbering: true # 目录自动编号 hideMeta: false # 是否隐藏文章的元信息，如发布日期、作者等 mermaid: true cover: image: \u0026#34;\u0026#34; caption: \u0026#34;\u0026#34; alt: \u0026#34;\u0026#34; relative: false --- \u0026lt;!-- more --\u0026gt; Github Pages部署网站 创建GitHub远程仓库 在Github创建仓库，仓库名填写[用户名].github.io，注意[用户名]部分必须是Github用户名，否则Github Pages不会正常工作。\n勾选Add a README file，点击Create Repository，创建仓库。\n创建仓库\n将本地仓库推送到Github 在根目录下创建.gitignore，内容如下：\npublic resources .hugo_build.lock 创建远程仓库并提交\n# [username]替换为用户名 git remote add origin git@github.com:[username]/[username].github.io.git # 提交 git add . git commit -m \u0026#34;Hugo + PaperMod\u0026#34; # 推荐本地分支和远程分支名用main，免得不必要的麻烦（github安全检查） git push -u origin main 访问github仓库，选择 Settings \u0026gt; Pages , 将Build and deployment中source设置为Github Actions\n配置Github Actions 在本地仓库中创建文件.github/workflows/hugo.yaml，根据Hugo版本修改，内容如下：\n# 用于构建和部署Hugo网站到GitHub Pages的示例工作流程 name: 发布Hugo网站到Pages on: # 在目标为默认分支的推送上运行 push: branches: - main # 允许您手动从“Actions”标签运行此工作流程 workflow_dispatch: # 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages permissions: contents: read pages: write id-token: write # 仅允许一个并发部署，跳过在进行中的运行与最新排队的运行之间排队的运行。 # 但是，请不要取消进行中的运行，因为我们希望这些生产部署能够完成。 concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # 默认使用bash defaults: run: shell: bash jobs: # 构建作业 build: runs-on: ubuntu-22.04 env: HUGO_VERSION: 0.141.0 steps: - name: 安装Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 安装Dart Sass run: sudo snap install dart-sass - name: 检出 uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: 设置Pages id: pages uses: actions/configure-pages@v3 - name: 安装Node.js依赖 run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: 使用Hugo构建 env: # 为了与Hugo模块的最大向后兼容性 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: 上传构建产物 uses: actions/upload-pages-artifact@v2 with: path: ./public # 部署作业 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到GitHub Pages id: deployment uses: actions/deploy-pages@v2 提交，推送至远程仓库\ngit add . git commit -m \u0026#34;Add workflow\u0026#34; git push 未完成 评论系统 目前选择的是artalk作为评论系统，但是目前还存在问题，这是当前进度。\n图床 随着文章数量增多，图片将会越来越多，而github仓库有大小上限，将图片放在github上是不合理的，之后会考虑构建一个图床，但是存在和评论系统同样的问题，暂时没有构建\n","permalink":"http://localhost:1313/posts/hugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","summary":"使用Hugo + PaperMod + GithubPages 搭建个人博客网站","title":"Hugo个人博客搭建"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"},{"content":" 前言 我是用的artalk搭建的评论系统，部署在我自己的服务器上，在本地部署成功后，由于GitHubPages的页面使用https访问，而服务器数据访问使用的是http，导致在GitHubPages界面上加载失败。\n我的解决方案：由于使用https需要ssl证书，获取ssl证书又需要域名，所以在阿里云上购买了一个便宜的域名。由于云服务提供商的ssl证书太贵了（我记得前几年还免费来着，晕），所以选择从Let\u0026rsquo;s Encrypt 上获取ssl证书（有效期为90天，需要定期更新，但是免费）。这时候又遇到问题了，由于我使用的是京东云的服务器，由于没有备案，https请求全被拦截了，现在又恰逢过年，没时间备案（同时我也不太想去搞，问东问西的，时间跨度也挺长）。评论系统搭建暂时搁置，后续可能会选择备案，或者选择购买国外的服务器搭建，或者看能否不用https，或者暂时就不搭建了，等以后再说，反正也没人看不是。\n总结：如果你有已备案的国内的服务器，并且有域名和ssl证书，那么下面可以看，否则就不用看了。更好的推荐是使用第三方提供的评论系统了。\n安装环境 Ubuntu22.04 京东云2h4g服务器 参考文献 【Artalk】一文教会你部署整合博客评论功能 官方文档 artalk安装 我选择docker安装，简单易用（刚好之后要学习go，用go安装过，但是存在问题，老实了）\n首先你需要在服务器上安装一个 Docker（这我就不详细介绍了，没有得小伙伴可以去网上搜搜）。\n然后新建一个文件夹用于存放 Artalk 文件（/root/artalk)，然后执行下面的命令，只需要修改中文提示的地方：\n# 安装artalk cd artalk docker run -d \\ --name artalk \\ -p 服务器端口:23366 \\ -v $(pwd)/data:/data \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -e \u0026#34;ATK_LOCALE=zh-CN\u0026#34; \\ -e \u0026#34;ATK_SITE_DEFAULT=站点名\u0026#34; \\ -e \u0026#34;ATK_SITE_URL=站点URL\u0026#34; \\ --network artalk \\ artalk/artalk-go # 创建管理员账户 docker exec -it artalk artalk admin 浏览器输入 http://站点URL 进入 Artalk 后台登录界面，剩下的看着需要修改就行。\n数据库安装 同样选用docker安装数据库，我选择使用mysql5.7的docker镜像来部署服务，将数据库和artalk部署在同一个docker网络下（因为artalk会访问数据库，artalk会自动初始化数据库，但是貌似需要自己手动创建数据库）\n# 创建mysql容器，和artalk部署在同一个网络下 docker run -d \\ --name mysql \\ -e MYSQL_ROOT_PASSWORD=YourPassword \\ -p 3306:3306 \\ -v $(pwd)/mysql:/mysql \\ --network artalk mysql:5.7 # 进入mysql中创建artalk数据库，注意创建数据库时字符，需要和artalk中相同 docker exec -it mysql mysql -uroot -p 最后在artalk的管理界面填写数据库信息就行，数据库地址就写数据库容器名称\n到现在已经可以使用了，但是仍未开启https，在https界面是加载不出使用http的评论系统的\n开启https 这是我当前选择的方案\n首先就是购买域名，ssl证书是和域名绑定的，没有域名就拿不到ssl证书 买了域名之后就是添加DNS解析（国内服务器可能还需要备案，真羡慕国外的服务器） DNS解析配置完毕就是获取ssl证书，云服务器提供商ssl证书太贵了，我选择使用Let\u0026rsquo;s Encrypt 提供的ssl证书 以下是ssl证书获取，我是通过DNS解析TXT通过的验证，并没有使用nginx（因为服务器没备案，通过域名的http请求都被拦截了，哭）\n# 安装certbot sudo apt update sudo apt install certbot # 使用DNS验证申请 sudo certbot certonly --manual --preferred-challenges dns -d 你的域名 # 按照提示在域名解析中添加TXT记录，确认添加成功后再按确认 构建之余 也是用过docker-compose搭建，这个确实简单点，这是我当时写的配置文件，后续使用这个创建过。由于mysql的docker已经创建了，所以没有添加，仅供参考。\nservices: artalk: container_name: artalk image: artalk/artalk-go restart: unless-stopped ports: - 8080:23366 volumes: - ./data:/data networks: - artalk environment: - TZ=Asia/Shanghai - ATK_LOCALE=zh-CN - ATK_SITE_DEFAULT=网站名称 - ATK_SITE_URL=网站URL - ATK_ADMIN_USERS_0_NAME=管理员名称 - ATK_ADMIN_USERS_0_EMAIL=邮箱地址 - ATK_ADMIN_USERS_0_PASSWORD=(bcrypt)$2y$10$HnxBjnRnYF4Teg7jqedNL.MBtRcmNkk.ZmRU1SecB.afXIz.uVd6q - ATK_ADMIN_USERS_0_BADGE_NAME=管理员 - ATK_ADMIN_USERS_0_BADGE_COLOR=#0083FF networks: artalk: external: true ","permalink":"http://localhost:1313/posts/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","summary":"评论系统搭建，服务器没备案，https访问被拦截，暂时搭建失败，仅供参考","title":"博客评论系统"},{"content":" 开发环境 Ubuntu22.04 京东云2h4g服务器 Hugo version: 0.141(下载的时候没注意，直接就下了最新版了) PaperMod version: 2025-01-22最新版本(git安装的) 相关文档 官方文档 Hugo中文文档 PaperMod GitHub官网 参考文章 Hugo PaperMod 主题精装修 我是如何建立自己的个人博客的？ Hugo-papermod主题的优化记录 PaperMod主题配置 开始 hugo安装 # 从github下载需要版本的hugo wget https://github.com/gohugoio/hugo/releases/download/v0.141.0/hugo_extended_0.141.0_Linux-64bit.tar.gz # 解压 tar -xvzf hugo_extended_0.141.0_Linux-64bit.tar.gz # 移动hugo到/usr/local/bin/ sudo mv hugo /usr/local/bin/ # 查看是否安装成功 hugo version 安装主题 我使用的是PaperMod主题，在PaperMod的基础上进行了一些魔改，参考这个网站，PaperMod下载按官网流程即可\n# 配置文件用yaml，别问为什么，都是这样推荐的，能用就行 hugo new site MyFreshWebsite --format yaml # replace MyFreshWebsite with name of your website cd MyFreshWebsite # 初始化git git init # 安装PaperMod git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 # 这部分应该是在git仓库里建了一个子仓库，方便从github更新PaperMod，我觉得没啥必要，更新的情况太少，能跑够用就行了，需要的话手动更新就行了 cd themes/PaperMod git pull cd ../.. git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --remote --merge # 这部分记不太清了，不搞明白有什么作用 hugo mod init YOUR_OWN_GIT_REPOSITORY 配置文件 新版配置文件名称默认为hugo.yaml\n参考的其他人的介绍的配置文件，这个注释较多就用这个了，请根据需要修改\n主页显示我用的profileMode，这个好看点，默认和文章界面重复了\n# 起始 URL（换成您自己的域名） baseURL: \u0026#39;https://hugo-start.pages.dev\u0026#39; # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 每页显示的文章数量 paginate: 5 # 主题名称 theme: PaperMod # 语言代码（zh-简体中文） languageCode: \u0026#39;zh\u0026#39; DefaultContentLanguage: \u0026#39;zh\u0026#39; # 是否有 CJK 语言（中-日-韩） hasCJKLanguage: true # 是否生成 robots.txt enableRobotsTXT: true # 是否构建草稿 buildDrafts: false # 是否构建未来的文章 buildFuture: false # 是否构建过期的文章 buildExpired: false # 是否启用 Emoji enableEmoji: true # 是否启用 Git 信息 enableGitInfo: false # Google Analytics ID googleAnalytics: \u0026#39;\u0026#39; # 压缩输出静态文件 minify: # 是否不压缩 XML 文件 disableXML: true minifyOutput: true # 全局配置 params: env: production # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 网站描述 description: \u0026#39;Hugo Start with PaperMod\u0026#39; # 网站关键词（大部分搜索引擎已放弃，可注释掉） # keywords: [Blog, Portfolio, PaperMod] # 网站作者 author: \u0026#39;Your Name\u0026#39; # 多个作者写法 # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # OpenGraph / Twitter Card 预览图片（/static 下面的文件名称） images: [\u0026#39;opengraph.webp\u0026#39;] # 日期格式 DateFormat: \u0026#39;2006-01-02\u0026#39; # 默认主题 defaultTheme: auto # dark, light # 是否启用主题切换按钮 disableThemeToggle: false # 是否启用阅读时间展示 ShowReadingTime: true # 是都启用分享按钮 ShowShareButtons: true ShowPostNavLinks: true # 是否启用面包屑导航 ShowBreadCrumbs: true # 是否显示代码复制按钮 ShowCodeCopyButtons: false # 是否显示字数统计 ShowWordCount: true # 是否在页面显示 RSS 按钮 ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false # 是否禁用首页滚动到顶部 disableScrollToTop: false # 是否启用评论系统 comments: false # 是否隐藏 Meta 信息 hidemeta: false # 是否隐藏文章摘要 hideSummary: false # 是否显示目录 showtoc: false # 是否默认展开文章目录 tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true # 网站 Favicon 图标相关信息 # 可在 https://realfavicongenerator.net/ 生成 # 将图片复制到 /static 目录下 # 然后修改下面代码中的文件名 favicon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon16x16: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon32x32: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; apple_touch_icon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; safari_pinned_tab: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; label: # 使用文本替代 Logo 标签 text: \u0026#39;Hugo Start\u0026#39; # 网站 Logo 图片（/static 下面的文件名称） icon: /apple-touch-icon.png # 图标高度 iconHeight: 35 # 主页展示模式 # 个人信息模式 profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#39;This is subtitle\u0026#39; imageUrl: \u0026#39;\u0026lt;img location\u0026gt;\u0026#39; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # 主页 - 信息模式（默认） homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to hugo start, this is a example of Hugo and PaperMod # 主页 - 信息模式 图标展示 socialIcons: # - name: twitter # url: \u0026#34;https://twitter.com/\u0026#34; # - name: stackoverflow # url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#39;https://github.com/DejavuMoe/hugo-start\u0026#39; - name: mastodon url: \u0026#39;https://sink.love/@dejavu\u0026#39; # 站长验证 analytics: google: SiteVerificationTag: \u0026#39;\u0026#39; bing: SiteVerificationTag: \u0026#39;\u0026#39; yandex: SiteVerificationTag: \u0026#39;\u0026#39; # 文章封面设置 cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page # 关联编辑 editPost: URL: \u0026#39;https://github.com/DejavuMoe/hugo-start/edit/master/content/posts\u0026#39; Text: \u0026#39;Edit on GitHub\u0026#39; # edit text appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#39;title\u0026#39;, \u0026#39;permalink\u0026#39;, \u0026#39;summary\u0026#39;, \u0026#39;content\u0026#39;] # 顶部导航栏 menu: main: - identifier: \u0026#39;首页\u0026#39; name: \u0026#39;首页\u0026#39; url: / weight: 1 - identifier: \u0026#39;分类\u0026#39; name: \u0026#39;分类\u0026#39; url: /categories/ weight: 10 - identifier: \u0026#39;标签\u0026#39; name: \u0026#39;标签\u0026#39; url: /tags/ weight: 20 - identifier: \u0026#39;仓库\u0026#39; name: \u0026#39;仓库\u0026#39; url: https://github.com/DejavuMoe/hugo-start weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai privacy: vimeo: disabled: true enableDNT: true simple: true twitter: disabled: true enableDNT: true # 是否启用添加“请勿跟踪” HTTP 头。 simple: true # 如果启用简单模式，将建立一个静态的、无 JS 版本的推文。 instagram: disabled: true simple: true youtube: disabled: true privacyEnhanced: true services: instagram: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 twitter: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 默认模板 文章创建时的默认模板，相对于config全局配置，这里是局部配置，控制文章显示的必要属性\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: true # 是否为草稿 author: [\u0026#34;tkk\u0026#34;] categories: [] tags: [] keywords: [] description: \u0026#34;\u0026#34; # 文章描述，与搜索优化相关 summary: \u0026#34;\u0026#34; # 文章简单描述，会展示在主页 weight: # 输入1可以顶置文章，用来给文章展示排序，不填就默认按时间排序 slug: \u0026#34;\u0026#34; comments: false autoNumbering: true # 目录自动编号 hideMeta: false # 是否隐藏文章的元信息，如发布日期、作者等 mermaid: true cover: image: \u0026#34;\u0026#34; caption: \u0026#34;\u0026#34; alt: \u0026#34;\u0026#34; relative: false --- \u0026lt;!-- more --\u0026gt; Github Pages部署网站 创建GitHub远程仓库 在Github创建仓库，仓库名填写[用户名].github.io，注意[用户名]部分必须是Github用户名，否则Github Pages不会正常工作。\n勾选Add a README file，点击Create Repository，创建仓库。 ng)\n将本地仓库推送到Github 在根目录下创建.gitignore，内容如下：\npublic resources .hugo_build.lock 创建远程仓库并提交\n# [username]替换为用户名 git remote add origin git@github.com:[username]/[username].github.io.git # 提交 git add . git commit -m \u0026#34;Hugo + PaperMod\u0026#34; # 推荐本地分支和远程分支名用main，免得不必要的麻烦（github安全检查） git push -u origin main 访问github仓库，选择 Settings \u0026gt; Pages , 将Build and deployment中source设置为Github Actions\n配置Github Actions 在本地仓库中创建文件.github/workflows/hugo.yaml，根据Hugo版本修改，内容如下：\n# 用于构建和部署Hugo网站到GitHub Pages的示例工作流程 name: 发布Hugo网站到Pages on: # 在目标为默认分支的推送上运行 push: branches: - main # 允许您手动从“Actions”标签运行此工作流程 workflow_dispatch: # 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages permissions: contents: read pages: write id-token: write # 仅允许一个并发部署，跳过在进行中的运行与最新排队的运行之间排队的运行。 # 但是，请不要取消进行中的运行，因为我们希望这些生产部署能够完成。 concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # 默认使用bash defaults: run: shell: bash jobs: # 构建作业 build: runs-on: ubuntu-22.04 env: HUGO_VERSION: 0.141.0 steps: - name: 安装Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 安装Dart Sass run: sudo snap install dart-sass - name: 检出 uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: 设置Pages id: pages uses: actions/configure-pages@v3 - name: 安装Node.js依赖 run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: 使用Hugo构建 env: # 为了与Hugo模块的最大向后兼容性 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: 上传构建产物 uses: actions/upload-pages-artifact@v2 with: path: ./public # 部署作业 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到GitHub Pages id: deployment uses: actions/deploy-pages@v2 提交，推送至远程仓库\ngit add . git commit -m \u0026#34;Add workflow\u0026#34; git push 未完成 评论系统 目前选择的是artalk作为评论系统，但是目前还存在问题，这是当前进度。\n图床 随着文章数量增多，图片将会越来越多，而github仓库有大小上限，将图片放在github上是不合理的，之后会考虑构建一个图床，但是存在和评论系统同样的问题，暂时没有构建\n","permalink":"http://localhost:1313/posts/hugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","summary":"使用Hugo + PaperMod + GithubPages 搭建个人博客网站","title":"Hugo个人博客搭建"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"},{"content":" 前言 我是用的artalk搭建的评论系统，部署在我自己的服务器上，在本地部署成功后，由于GitHubPages的页面使用https访问，而服务器数据访问使用的是http，导致在GitHubPages界面上加载失败。\n我的解决方案：由于使用https需要ssl证书，获取ssl证书又需要域名，所以在阿里云上购买了一个便宜的域名。由于云服务提供商的ssl证书太贵了（我记得前几年还免费来着，晕），所以选择从Let\u0026rsquo;s Encrypt 上获取ssl证书（有效期为90天，需要定期更新，但是免费）。这时候又遇到问题了，由于我使用的是京东云的服务器，由于没有备案，https请求全被拦截了，现在又恰逢过年，没时间备案（同时我也不太想去搞，问东问西的，时间跨度也挺长）。评论系统搭建暂时搁置，后续可能会选择备案，或者选择购买国外的服务器搭建，或者看能否不用https，或者暂时就不搭建了，等以后再说，反正也没人看不是。\n总结：如果你有已备案的国内的服务器，并且有域名和ssl证书，那么下面可以看，否则就不用看了。更好的推荐是使用第三方提供的评论系统了。\n安装环境 Ubuntu22.04 京东云2h4g服务器 参考文献 【Artalk】一文教会你部署整合博客评论功能 官方文档 artalk安装 我选择docker安装，简单易用（刚好之后要学习go，用go安装过，但是存在问题，老实了）\n首先你需要在服务器上安装一个 Docker（这我就不详细介绍了，没有得小伙伴可以去网上搜搜）。\n然后新建一个文件夹用于存放 Artalk 文件（/root/artalk)，然后执行下面的命令，只需要修改中文提示的地方：\n# 安装artalk cd artalk docker run -d \\ --name artalk \\ -p 服务器端口:23366 \\ -v $(pwd)/data:/data \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -e \u0026#34;ATK_LOCALE=zh-CN\u0026#34; \\ -e \u0026#34;ATK_SITE_DEFAULT=站点名\u0026#34; \\ -e \u0026#34;ATK_SITE_URL=站点URL\u0026#34; \\ --network artalk \\ artalk/artalk-go # 创建管理员账户 docker exec -it artalk artalk admin 浏览器输入 http://站点URL 进入 Artalk 后台登录界面，剩下的看着需要修改就行。\n数据库安装 同样选用docker安装数据库，我选择使用mysql5.7的docker镜像来部署服务，将数据库和artalk部署在同一个docker网络下（因为artalk会访问数据库，artalk会自动初始化数据库，但是貌似需要自己手动创建数据库）\n# 创建mysql容器，和artalk部署在同一个网络下 docker run -d \\ --name mysql \\ -e MYSQL_ROOT_PASSWORD=YourPassword \\ -p 3306:3306 \\ -v $(pwd)/mysql:/mysql \\ --network artalk mysql:5.7 # 进入mysql中创建artalk数据库，注意创建数据库时字符，需要和artalk中相同 docker exec -it mysql mysql -uroot -p 最后在artalk的管理界面填写数据库信息就行，数据库地址就写数据库容器名称\n到现在已经可以使用了，但是仍未开启https，在https界面是加载不出使用http的评论系统的\n开启https 这是我当前选择的方案\n首先就是购买域名，ssl证书是和域名绑定的，没有域名就拿不到ssl证书 买了域名之后就是添加DNS解析（国内服务器可能还需要备案，真羡慕国外的服务器） DNS解析配置完毕就是获取ssl证书，云服务器提供商ssl证书太贵了，我选择使用Let\u0026rsquo;s Encrypt 提供的ssl证书 以下是ssl证书获取，我是通过DNS解析TXT通过的验证，并没有使用nginx（因为服务器没备案，通过域名的http请求都被拦截了，哭）\n# 安装certbot sudo apt update sudo apt install certbot # 使用DNS验证申请 sudo certbot certonly --manual --preferred-challenges dns -d 你的域名 # 按照提示在域名解析中添加TXT记录，确认添加成功后再按确认 构建之余 也是用过docker-compose搭建，这个确实简单点，这是我当时写的配置文件，后续使用这个创建过。由于mysql的docker已经创建了，所以没有添加，仅供参考。\nservices: artalk: container_name: artalk image: artalk/artalk-go restart: unless-stopped ports: - 8080:23366 volumes: - ./data:/data networks: - artalk environment: - TZ=Asia/Shanghai - ATK_LOCALE=zh-CN - ATK_SITE_DEFAULT=网站名称 - ATK_SITE_URL=网站URL - ATK_ADMIN_USERS_0_NAME=管理员名称 - ATK_ADMIN_USERS_0_EMAIL=邮箱地址 - ATK_ADMIN_USERS_0_PASSWORD=(bcrypt)$2y$10$HnxBjnRnYF4Teg7jqedNL.MBtRcmNkk.ZmRU1SecB.afXIz.uVd6q - ATK_ADMIN_USERS_0_BADGE_NAME=管理员 - ATK_ADMIN_USERS_0_BADGE_COLOR=#0083FF networks: artalk: external: true ","permalink":"http://localhost:1313/posts/%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","summary":"评论系统搭建，服务器没备案，https访问被拦截，暂时搭建失败，仅供参考","title":"博客评论系统"},{"content":" 开发环境 Ubuntu22.04 京东云2h4g服务器 Hugo version: 0.141(下载的时候没注意，直接就下了最新版了) PaperMod version: 2025-01-22最新版本(git安装的) 相关文档 官方文档 Hugo中文文档 PaperMod GitHub官网 参考文章 Hugo PaperMod 主题精装修 我是如何建立自己的个人博客的？ Hugo-papermod主题的优化记录 PaperMod主题配置 开始 hugo安装 # 从github下载需要版本的hugo wget https://github.com/gohugoio/hugo/releases/download/v0.141.0/hugo_extended_0.141.0_Linux-64bit.tar.gz # 解压 tar -xvzf hugo_extended_0.141.0_Linux-64bit.tar.gz # 移动hugo到/usr/local/bin/ sudo mv hugo /usr/local/bin/ # 查看是否安装成功 hugo version 安装主题 我使用的是PaperMod主题，在PaperMod的基础上进行了一些魔改，参考这个网站，PaperMod下载按官网流程即可\n# 配置文件用yaml，别问为什么，都是这样推荐的，能用就行 hugo new site MyFreshWebsite --format yaml # replace MyFreshWebsite with name of your website cd MyFreshWebsite # 初始化git git init # 安装PaperMod git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 # 这部分应该是在git仓库里建了一个子仓库，方便从github更新PaperMod，我觉得没啥必要，更新的情况太少，能跑够用就行了，需要的话手动更新就行了 cd themes/PaperMod git pull cd ../.. git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) git submodule update --remote --merge # 这部分记不太清了，不搞明白有什么作用 hugo mod init YOUR_OWN_GIT_REPOSITORY 配置文件 新版配置文件名称默认为hugo.yaml\n参考的其他人的介绍的配置文件，这个注释较多就用这个了，请根据需要修改\n主页显示我用的profileMode，这个好看点，默认和文章界面重复了\n# 起始 URL（换成您自己的域名） baseURL: \u0026#39;https://hugo-start.pages.dev\u0026#39; # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 每页显示的文章数量 paginate: 5 # 主题名称 theme: PaperMod # 语言代码（zh-简体中文） languageCode: \u0026#39;zh\u0026#39; DefaultContentLanguage: \u0026#39;zh\u0026#39; # 是否有 CJK 语言（中-日-韩） hasCJKLanguage: true # 是否生成 robots.txt enableRobotsTXT: true # 是否构建草稿 buildDrafts: false # 是否构建未来的文章 buildFuture: false # 是否构建过期的文章 buildExpired: false # 是否启用 Emoji enableEmoji: true # 是否启用 Git 信息 enableGitInfo: false # Google Analytics ID googleAnalytics: \u0026#39;\u0026#39; # 压缩输出静态文件 minify: # 是否不压缩 XML 文件 disableXML: true minifyOutput: true # 全局配置 params: env: production # 网站标题 title: \u0026#39;Hugo Start\u0026#39; # 网站描述 description: \u0026#39;Hugo Start with PaperMod\u0026#39; # 网站关键词（大部分搜索引擎已放弃，可注释掉） # keywords: [Blog, Portfolio, PaperMod] # 网站作者 author: \u0026#39;Your Name\u0026#39; # 多个作者写法 # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # OpenGraph / Twitter Card 预览图片（/static 下面的文件名称） images: [\u0026#39;opengraph.webp\u0026#39;] # 日期格式 DateFormat: \u0026#39;2006-01-02\u0026#39; # 默认主题 defaultTheme: auto # dark, light # 是否启用主题切换按钮 disableThemeToggle: false # 是否启用阅读时间展示 ShowReadingTime: true # 是都启用分享按钮 ShowShareButtons: true ShowPostNavLinks: true # 是否启用面包屑导航 ShowBreadCrumbs: true # 是否显示代码复制按钮 ShowCodeCopyButtons: false # 是否显示字数统计 ShowWordCount: true # 是否在页面显示 RSS 按钮 ShowRssButtonInSectionTermList: true UseHugoToc: true disableSpecial1stPost: false # 是否禁用首页滚动到顶部 disableScrollToTop: false # 是否启用评论系统 comments: false # 是否隐藏 Meta 信息 hidemeta: false # 是否隐藏文章摘要 hideSummary: false # 是否显示目录 showtoc: false # 是否默认展开文章目录 tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true # 网站 Favicon 图标相关信息 # 可在 https://realfavicongenerator.net/ 生成 # 将图片复制到 /static 目录下 # 然后修改下面代码中的文件名 favicon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon16x16: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; favicon32x32: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; apple_touch_icon: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; safari_pinned_tab: \u0026#39;\u0026lt;link / abs url\u0026gt;\u0026#39; label: # 使用文本替代 Logo 标签 text: \u0026#39;Hugo Start\u0026#39; # 网站 Logo 图片（/static 下面的文件名称） icon: /apple-touch-icon.png # 图标高度 iconHeight: 35 # 主页展示模式 # 个人信息模式 profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#39;This is subtitle\u0026#39; imageUrl: \u0026#39;\u0026lt;img location\u0026gt;\u0026#39; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # 主页 - 信息模式（默认） homeInfoParams: Title: \u0026#34;Hi there \\U0001F44B\u0026#34; Content: Welcome to hugo start, this is a example of Hugo and PaperMod # 主页 - 信息模式 图标展示 socialIcons: # - name: twitter # url: \u0026#34;https://twitter.com/\u0026#34; # - name: stackoverflow # url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#39;https://github.com/DejavuMoe/hugo-start\u0026#39; - name: mastodon url: \u0026#39;https://sink.love/@dejavu\u0026#39; # 站长验证 analytics: google: SiteVerificationTag: \u0026#39;\u0026#39; bing: SiteVerificationTag: \u0026#39;\u0026#39; yandex: SiteVerificationTag: \u0026#39;\u0026#39; # 文章封面设置 cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page # 关联编辑 editPost: URL: \u0026#39;https://github.com/DejavuMoe/hugo-start/edit/master/content/posts\u0026#39; Text: \u0026#39;Edit on GitHub\u0026#39; # edit text appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#39;title\u0026#39;, \u0026#39;permalink\u0026#39;, \u0026#39;summary\u0026#39;, \u0026#39;content\u0026#39;] # 顶部导航栏 menu: main: - identifier: \u0026#39;首页\u0026#39; name: \u0026#39;首页\u0026#39; url: / weight: 1 - identifier: \u0026#39;分类\u0026#39; name: \u0026#39;分类\u0026#39; url: /categories/ weight: 10 - identifier: \u0026#39;标签\u0026#39; name: \u0026#39;标签\u0026#39; url: /tags/ weight: 20 - identifier: \u0026#39;仓库\u0026#39; name: \u0026#39;仓库\u0026#39; url: https://github.com/DejavuMoe/hugo-start weight: 30 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma pygmentsUseClasses: true markup: highlight: noClasses: false # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai privacy: vimeo: disabled: true enableDNT: true simple: true twitter: disabled: true enableDNT: true # 是否启用添加“请勿跟踪” HTTP 头。 simple: true # 如果启用简单模式，将建立一个静态的、无 JS 版本的推文。 instagram: disabled: true simple: true youtube: disabled: true privacyEnhanced: true services: instagram: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 twitter: disableInlineCSS: true # 禁用 Hugo 提供的内联样式 默认模板 文章创建时的默认模板，相对于config全局配置，这里是局部配置，控制文章显示的必要属性\n--- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34; date: {{ .Date }} lastmod: {{ .Date }} draft: true # 是否为草稿 author: [\u0026#34;tkk\u0026#34;] categories: [] tags: [] keywords: [] description: \u0026#34;\u0026#34; # 文章描述，与搜索优化相关 summary: \u0026#34;\u0026#34; # 文章简单描述，会展示在主页 weight: # 输入1可以顶置文章，用来给文章展示排序，不填就默认按时间排序 slug: \u0026#34;\u0026#34; comments: false autoNumbering: true # 目录自动编号 hideMeta: false # 是否隐藏文章的元信息，如发布日期、作者等 mermaid: true cover: image: \u0026#34;\u0026#34; caption: \u0026#34;\u0026#34; alt: \u0026#34;\u0026#34; relative: false --- \u0026lt;!-- more --\u0026gt; Github Pages部署网站 创建GitHub远程仓库 在Github创建仓库，仓库名填写[用户名].github.io，注意[用户名]部分必须是Github用户名，否则Github Pages不会正常工作。\n勾选Add a README file，点击Create Repository，创建仓库。\n将本地仓库推送到Github 在根目录下创建.gitignore，内容如下：\npublic resources .hugo_build.lock 创建远程仓库并提交\n# [username]替换为用户名 git remote add origin git@github.com:[username]/[username].github.io.git # 提交 git add . git commit -m \u0026#34;Hugo + PaperMod\u0026#34; # 推荐本地分支和远程分支名用main，免得不必要的麻烦（github安全检查） git push -u origin main 访问github仓库，选择 Settings \u0026gt; Pages , 将Build and deployment中source设置为Github Actions\n配置Github Actions 在本地仓库中创建文件.github/workflows/hugo.yaml，根据Hugo版本修改，内容如下：\n# 用于构建和部署Hugo网站到GitHub Pages的示例工作流程 name: 发布Hugo网站到Pages on: # 在目标为默认分支的推送上运行 push: branches: - main # 允许您手动从“Actions”标签运行此工作流程 workflow_dispatch: # 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages permissions: contents: read pages: write id-token: write # 仅允许一个并发部署，跳过在进行中的运行与最新排队的运行之间排队的运行。 # 但是，请不要取消进行中的运行，因为我们希望这些生产部署能够完成。 concurrency: group: \u0026#34;pages\u0026#34; cancel-in-progress: false # 默认使用bash defaults: run: shell: bash jobs: # 构建作业 build: runs-on: ubuntu-22.04 env: HUGO_VERSION: 0.141.0 steps: - name: 安装Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: 安装Dart Sass run: sudo snap install dart-sass - name: 检出 uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: 设置Pages id: pages uses: actions/configure-pages@v3 - name: 安装Node.js依赖 run: \u0026#34;[[ -f package-lock.json || -f npm-shrinkwrap.json ]] \u0026amp;\u0026amp; npm ci || true\u0026#34; - name: 使用Hugo构建 env: # 为了与Hugo模块的最大向后兼容性 HUGO_ENVIRONMENT: production HUGO_ENV: production run: | hugo \\ --gc \\ --minify \\ --baseURL \u0026#34;${{ steps.pages.outputs.base_url }}/\u0026#34; - name: 上传构建产物 uses: actions/upload-pages-artifact@v2 with: path: ./public # 部署作业 deploy: environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} runs-on: ubuntu-latest needs: build steps: - name: 部署到GitHub Pages id: deployment uses: actions/deploy-pages@v2 提交，推送至远程仓库\ngit add . git commit -m \u0026#34;Add workflow\u0026#34; git push 未完成 评论系统 目前选择的是artalk作为评论系统，但是目前还存在问题，这是当前进度。\n图床 随着文章数量增多，图片将会越来越多，而github仓库有大小上限，将图片放在github上是不合理的，之后会考虑构建一个图床，但是存在和评论系统同样的问题，暂时没有构建\n","permalink":"http://localhost:1313/posts/hugo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","summary":"使用Hugo + PaperMod + GithubPages 搭建个人博客网站","title":"Hugo个人博客搭建"},{"content":" Ubuntu22.04 git # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\nHost ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\nPort 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"关于我 UESTC 24级研究生 计算机科学与技术专业 关于本站 不定期更新学习收获 联系方式 联系方式展示就不留了（哈哈） ","permalink":"http://localhost:1313/about/","summary":"about","title":"🙋🏻‍♂️ 关于"}]