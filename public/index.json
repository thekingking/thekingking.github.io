[{"content":" B+树是一种树数据结构，广泛应用于数据库和文件系统中，用于高效地存储和检索数据。B+树是B树的一种变体，它在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。\n基本B树 B树基本结构 B树的每个节点可以包含多个键值对和指向子节点的指针。B树的每个节点通常包含以下内容：\n键（Key）：用于排序和导航的值。 数据记录（Data Record）：实际存储的数据或指向数据记录的指针。 子节点指针（Child Pointers）：指向子节点的指针。 一个d阶b树中每个节点最多包含2d个键和2d+1个指针，最少包含d个键和d+1个指针。B树在磁盘存储中非常高效，因为每个节点可以存储多个的键值对，减少了磁盘I/O操作的次数。 B树特点 平衡性。B树是一种平衡树，所有叶子节点都在同一层。这意味着从根节点到任意叶子节点的路径长度是相同的，确保了查询操作的时间复杂度为O(log n)。 多路搜索。B树的每个节点可以包含多个键和指针，因此它是一种多路搜索树。这使得B树在磁盘存储中非常高效，因为每个节点可以存储更多的键值对，减少了磁盘I/O操作的次数，I/O操作次数不超过logd(n)(d为B树的阶数）。 插入和删除操作。B树的插入和删除操作通常需要维护树的平衡性。插入操作可能会导致节点分裂，删除操作可能会导致节点合并。这些操作确保了树的高度保持在合理范围内，从而保持查询效率。 B树的操作 查询操作。B树的查询操作类似于二叉搜索树的查询操作，但B树是多路搜索树，因此需要遍历多个子节点。查询操作的时间复杂度为O(log n)。 插入操作。插入操作首先需要找到合适的叶子节点来插入新键值对。如果叶子节点已满，则需要进行节点分裂操作。节点分裂操作将节点分成两个节点，并将中间键提升到父节点中。插入操作的时间复杂度为O(log n)。 删除操作。删除操作首先需要找到包含要删除键的节点。如果删除键后节点中的键数量不足，则需要进行节点合并操作。节点合并操作将相邻节点合并成一个节点，并将多余的键提升到父节点中。删除操作的时间复杂度为O(log n)。 B树变种B+树 B+树相对于B树的变化：\n存储位置：B+树的内部节点仅包含键和子节点指针，实际的数据记录存储在叶子节点中。叶子节点之间通过指针连接，形成一个有序链表。 查询范围：B+树相对B树在顺序查找方面更加高效，因为叶子节点通过指针连接成一个有序链表。只需要从起始叶子节点开始遍历链表，直到找到结束叶子节点即可。 空间效率：相比B树，B+树的内部节点仅包含键和子节点指针，所有的数据记录均在叶子节点中，这使得内部节点的空间利用率更高。 查询效率：相比与B树，B+树将叶子节点通过指针连接，使得B+树在对文件进行顺序处理时拥有远超B树的效率。 B+树在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询，因此在现代数据存储和检索系统中更为常见。B+树通过将数据存储在叶子节点中，并使用内部节点进行导航，实现了高效的查询、插入、删除和范围查询操作。B+树的平衡性和多路搜索特性使得它在处理大量数据时表现出色，是现代数据存储和检索系统中的重要数据结构。 ","permalink":"http://localhost:1313/posts/b+tree/","summary":"B+树介绍","title":"B+Tree"},{"content":" Ubuntu22.04 git 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test 1 2 3 4 5 6 7 8 9 10 # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 1 2 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\n1 2 3 4 5 Host ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 1 2 3 4 5 6 7 8 9 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\n1 2 3 4 5 Port 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 1 2 3 4 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"},{"content":"引子 前段时间对博客进行了整理和翻新，趁着记忆还没完全模糊，将搭建博客的细节记录下来。个人而言，对目前博客的各项功能以及美观度还是比较满意的，而这些背后也付出了一定的努力，希望也对其他想折腾博客的人有些许帮助，那样就更好了！也作为博客分类「折腾」的第一篇，送给自己~\n注意：博客的主题是基于 Hugo 的 PaperMod 进行魔改，故而诸多相关细节未必适用于其他博客框架，请阅读理解后进行使用。另外，本博客相关源码也放在此，方便进行查阅\nMyPaperMod This is the demo of my improved PaperMod theme. You can visit the introduction: https://yunpengtai.top/posts/hello-world/ HTML 关于本文涉及的一些用法示例，可以参见本篇文章的源码\n基础知识 这里主要介绍 Hugo 主题相关的基础知识，比如文件夹代表的意思，我使用的 Hugo 版本以及常用命令等，有基础的读者应直接跳至下一节进行阅读\n组成 开始之前，先说明一个比较重要的事情，你会发现 layouts 和 assets 在 themes 下某个主题里也有，不要在主题里进行修改，否则当你主题更新后，就比较麻烦，正确做法应该是在 themes 同级目录创建\n以下即为一个 Hugo 主题常见的组成结构：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 |—— assets # 放置 css 和 js |—— css |—— js |—— content # 放置网站内容，比如 posts，或者 friends.md |—— posts |—— hello-world.md friends.md # 友链内容 |—— data # 我是只放了 SVG.toml 文件 |—— layouts # 控制网站相关的布局 |—— _default # 主题内置的布局，如 single.html 代表一个帖子的布局 |—— partials # 放置你个人魔改的部件 |—— extend_footer.html # 代码会添加到原网站的 footer 里 |—— extend_head.html # 代码会添加到原网站的 head 里 |—— shortcodes # 一些好玩的 shortcodes 命令 |—— public # 渲染后的纯 HTML 代码，刚下载未渲染不会有该目录 |—— resources # 一般不用管 |—— static # 网站的字体以及 icon 放置目录 |—— fonts favicon.ico |—— themes |—— PaperMod config.yaml # 网站的配置文件 content 目录下的路径关系，即为网站上的链接顺序，比如 hello-world.md 访问链接便为：域名/posts/hello-world/，而 friends.md 便为 域名/friends BTW，如果想在文章中引用博客内容，可以省去域名[hello-world](/posts/hello-world)\n另外，Hugo 新手可能不知道 shortcodes 是啥意思，可以理解为一种快捷指令，具体的意思也可去 Hugo 官网 查看\nconfig.yaml 里面可以放置全局参数以及 menu 等信息，根据你所使用的主题文档进行修改即可。这里举个简单的例子，假如你希望你的网站遵循浏览器的亮暗偏好来加载，在 PaperMod 里就可以这样设置：\n1 2 3 params: ... # 其他参数 defaultTheme: auto 调试和发布 我的 Hugo 一直是使用老版本：\n1 2 hugo version # hugo v0.117.0-b2f0696cad918fb61420a6aff173eb36662b406e linux/amd64 BuildDate=2023-08-07T12:49:48Z VendorInfo=gohugoio Hugo 常用的也就两个命令：\n1 2 hugo server # 进行本地调试 hugo # 正式渲染，结果在 public，将 public 上传至支持静态站的地方即可发布 另外关于 Hugo 中常见的变量以及支持的方法，也应该去官网查看更详细的记录，还有时常在 Hugo HTML 中出现的，类似如下内容是属于「Go」的模板函数，不只是 Go，如果有任何疑问，查看官网 doc 永远是第一选择\n1 2 3 {{ if or .Params.math .Site.Params.math }} ... {{ end }} 有了如上的基础知识后，我们可以来愉快的进行精装修了\n数学公式 $a=b$ 这是行内公式\n这是行间公式 $$ e=mc^2 $$\n对于写技术 blog 的同志们来说，数学公式的适配几乎是必须的，然而很多主题未对数学公式进行适配，或者只是比较随意的适配（有些情况还是不会 work），我使用的这个主题作者就在 GitHub issues 里贴了所谓的实现方案，内容如下：\n1 2 3 4 5 6 {{ if or .Params.math .Site.Params.math }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} 看似基本的公式可以正常显示，然而，当公式复杂起来，上述方案就不会 work 了，比如：\n1 2 3 $$ \\frac{\\partial E(\\boldsymbol{w})}{\\partial z_j} = \\sum\\limits_{k}\\frac{\\partial E(\\boldsymbol{w})}{\\partial y_{k}}\\frac{\\partial y_k}{\\partial z_{j}}= \\sum\\limits_{k} (y_{k}- \\hat{y}_{k}) w_{kj}^{(2)} \\tag{5.11} $$ 有了可以渲染数学元素的工具还不够，因为你还需要保证公式的内容并没有进行修改。举个例子，当你想要渲染 a_{1} + b_{1}，而 Hugo 可能将下划线渲染成 markdown 的模式：a\u0026lt;em\u0026gt;1 + b\u0026lt;/em\u0026gt;1，导致 mathjax 去渲染的时候找不到你原来的公式，进而导致了渲染的失败。解决方案是将带有公式的部分先用代码 block 装饰起来，避免内容被修改，接着再将代码 block 去掉，完整的送给渲染工具 借鉴了谢益辉的相关实现\n在 layouts/partials/extend_footer.html 中复制以下 js 代码：\n去掉数学公式的代码框 js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;script\u0026gt; (function () { var i, text, code, codes = document.getElementsByTagName(\u0026#34;code\u0026#34;); for (i = 0; i \u0026lt; codes.length; ) { code = codes[i]; if (code.parentNode.tagName !== \u0026#34;PRE\u0026#34; \u0026amp;\u0026amp; code.childElementCount === 0) { text = code.textContent; if (/^\\$[^$]/.test(text) \u0026amp;\u0026amp; /[^$]\\$$/.test(text)) { text = text.replace(/^\\$/, \u0026#34;\\\\(\u0026#34;).replace(/\\$$/, \u0026#34;\\\\)\u0026#34;); code.textContent = text; } if ( /^\\\\\\((.|\\s)+\\\\\\)$/.test(text) || /^\\\\\\[(.|\\s)+\\\\\\]$/.test(text) || /^\\$(.|\\s)+\\$$/.test(text) || /^\\\\begin\\{([^}]+)\\}(.|\\s)+\\\\end\\{[^}]+\\}$/.test(text) ) { code.outerHTML = code.innerHTML; // remove \u0026lt;code\u0026gt;\u0026lt;/code\u0026gt; continue; } } i++; } })(); \u0026lt;/script\u0026gt; 接着在 layouts/partials/extend_head.html 中引用 layouts/partials/mathjax.html：由全局和网站变量来共同决定是否进行数学公式渲染 上述文件若是不存在则自己创建\n1 2 3 {{ if or .Params.math .Site.Params.math }} {{- partial \u0026#34;mathjax.html\u0026#34; .}} {{ end }} mathjax.html 的内容如下，当然我这里还加了额外的 boldsymbol 包，没有需求的可以去掉\nmathjax.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 \u0026lt;script\u0026gt; MathJax = { loader: { load: [\u0026#34;[tex]/boldsymbol\u0026#34;] }, tex: { inlineMath: [ [\u0026#34;`$\u0026#34;, \u0026#34;$`\u0026#34;], [\u0026#34;\\\\(\u0026#34;, \u0026#34;\\\\)\u0026#34;], ], displayMath: [ [\u0026#34;`$$`\u0026#34;, \u0026#34;`$$`\u0026#34;], [\u0026#34;\\\\[\u0026#34;, \u0026#34;\\\\]\u0026#34;], ], processEscapes: true, processEnvironments: true, tags: \u0026#34;all\u0026#34;, packages: { \u0026#34;[+]\u0026#34;: [\u0026#34;boldsymbol\u0026#34;] }, }, }; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-chtml-full.js\u0026#34; integrity=\u0026#34;sha256-kbAFUDxdHwlYv01zraGjvjNZayxKtdoiJ38bDTFJtaQ=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; 至此，数学公式的渲染问题就解决好了，使用时把原本的公式放入 code block 即可：\n1 2 3 4 5 `$a=b$` 行内公式 以下是行间公式 `$$ e=mc^2 $$` 评论系统 评论系统用过很多，比如用 GitHub 来驱动，或者自部署类比如 Waline，之前一直是用 Waline，有表情包，也支持邮箱通知等。但是，技术 blog 的评论系统怎么能没有「公式的集成」呢？所以我选择了Artalk，支持公式，表情，邮箱通知，自动亮暗模式等，功能很全，作者也在积极更新~\n概念上 Artalk 分为前后端以及存储所需要的数据库，先讲前端的配置，创建 layouts/partials/artalk.html，内容如下，因为我需要用到 katex，故而引入了其 css 和 js 相关的文件，读者应根据自己需要进行取舍\n最重要的是根据浏览器的偏好以及读者对网站的偏好来设置亮暗，首先第一次加载时网站和 Artalk 会按照浏览器的偏好来加载。接着，如果读者点击了网站的「亮暗切换按钮」，那么以后的加载就遵循网站的亮暗偏好，而非浏览器的偏好。实现的逻辑大概就是通过一些 element 来获取当前的偏好，不同主题的 element id 势必会有些许不同，故而不可照抄~\nartalk.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \u0026lt;!-- Artalk Doc 默认是 unpkg 的 CDN，尽量不要用，国内连通性不好 --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-3UiQGuEI4TTMaFmGIZumfRPtfKQ3trwQE2JgosJxCnGmQpL/lJdjpcHkaaFwHlcI\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.7/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-G0zcxDFp5LWZtDuRMnBkk3EphCK1lhEf4UEyEM693ka574TZGwo4IWwS6QLzM/2t\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/artalk@2.8.6/dist/Artalk.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@artalk/plugin-katex@0.2.4/dist/artalk-plugin-katex.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;Comments\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const savedTheme = localStorage.getItem(\u0026#34;pref-theme\u0026#34;); let darkMode = \u0026#34;auto\u0026#34;; // 查看网站是否已经设置了亮暗偏好 if (savedTheme !== null) { darkMode = savedTheme === \u0026#34;dark\u0026#34; ? true : false; } const artalk = Artalk.init({ el: \u0026#34;#Comments\u0026#34;, // 绑定元素的 Selector pageKey: \u0026#34;\u0026#34;, pageTitle: \u0026#34;{{ .Title }}\u0026#34;, server: \u0026#34;{{ site.Params.artalk.server }}\u0026#34;, // 后端地址 site: \u0026#34;{{ site.Params.artalk.site }}\u0026#34;, // 你的站点名 darkMode: darkMode, // 首次打开时自动亮暗模式 versionCheck: false, // 不提醒需要更新，还需要后端也设置，后端 \u0026gt; 前端 }); document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { document.body.className.includes(\u0026#34;dark\u0026#34;) ? artalk.setDarkMode(!1) : artalk.setDarkMode(!0); }); \u0026lt;/script\u0026gt; 另外，关于停用版本检测，不仅要设置前端的参数，后端的参数也需要设置为 false，具体即为 render 上的 conf.yaml\n接着在同级目录中创建 comments.html 来引用即可：\n1 2 3 {{ if or .Params.comments .Site.Params.comments }} {{- partial \u0026#34;artalk.html\u0026#34; .}} {{ end }} 关于数据库以及后端部署的部署，很大程度得益于这位网友的帖子，重复内容就不多赘述，我选择的是 Neon+Render 来分别部署数据库和后端，关于 Render 部署的详细文件，可以参考这里。这里为表情包多做一条说明，如果是希望网站支持表情包，则在 conf.yaml 中的 emoticons 项中加入表情包的远程链接\n1 emoticons: link_to_artalk.json 关于此文件的具体格式，可以参考我的表情包配置仓库，至此，评论系统集成也已经完毕。当然，本网站的 artalk 看上去可能与你们的有些许不同，比如表情包的大小以及没有头像，我自己又改了一些 CSS 来完成上述目标，创建 assets/css/extended/artalk.css，将 artalk 对应的 CSS 内容复制进去，然后修改为以下内容，如果没搜到对应的 CSS 项，就直接新建即可（关于字体的导入，在字体设置）\nArtalk css 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /* 改变表情包大小 */ img[atk-emoticon] { width: 5em; height: auto; display: initial; } /* 下列内容可能存在于原来的 CSS 文件内，请查找后进行修改 */ .atk-comment \u0026gt; .atk-avatar img { width: 50px; height: 50px; border-radius: 3px; display: none; /* 移除头像 */ } /* artalk 代码相关的字体与正文对齐 */ .artalk code, .atk-layer-wrap code { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; margin: 0 0.05em; padding: 0 0.4em; display: inline-block; vertical-align: middle; font-size: 0.9em; background-color: var(--at-color-bg-grey); color: var(--at-color-font); border-radius: 2px; } .artalk pre code *, .atk-layer-wrap pre code * { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; } 至于字体方面，等后面讲网站字体介绍即可，并未加其他特殊设置。关于邮箱通知，你需要去专门进行相关设置，请根据官方文档进行，比较简单，这里进行省略\n更好看 这一节主要讲为了博客变得更好看做的改变\n字体 我对博客的字体向来是比较挑剔，而且这很影响读者的观感，我比较喜欢霞鹜文楷，这款字体好看而且是开源的。不过该字体可不小，对于个人的轻量级 blog 来说，还是存在着优化的可能性，故而，我在博客上使用的是 woff2 格式文件，大小只有 2 M，直接放到了 static/fonts 目录，有需要可以去我的仓库里下载。同时英文使用 Apple 的字体 SF Pro Text Regular 来渲染，然后用 CSS 来控制字体加载即可：\n字体 CSS 设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @font-face { font-family: \u0026#34;LXGWWenKaiScreenR\u0026#34;; src: url(\u0026#34;/fonts/lxgwwenkaiscreen.subset.v1.235.standard.woff2\u0026#34;); } /* https://www.webfontfree.com/cn/download/SFProText-Regular */ @font-face { font-family: \u0026#34;SFProText-Regular\u0026#34;; src: url(\u0026#34;/fonts/SFProText-Regular.woff2\u0026#34;); } body { font-family: \u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 16px; line-height: 1.6; word-break: break-word; background: var(--theme); font-display: swap; } 代码渲染 代码渲染的主题其实也是见仁见智吧，我个人是选择了atom-one-dark/light\n这里提供一下修改方法，因为我们需要覆盖掉原先主题对于代码渲染的设置，所以在 assets/css/hljs 中创建 an-old-hope.min.css ，注意，必须为该名字，当然如果是 Hugo PaperMod 主题肯定另有不同，然后直接复制相关的 CSS 进去。\n这里唯一需要注意的是亮暗模式的设置，对于亮色模式，直接拷贝 light 即可，但对于暗色来说，则需要一些特定的限定：\n1 2 3 4 5 6 7 body.dark { .hljs { color: #abb2bf; background: #282c34; } ... } 同时，需要修改亮暗模式下代码框的背景颜色，这里是直接用变量来进行替代。然后关于代码的字体设置，笔者使用 Consolas 和霞鹜文楷（注释的中文字体）。为了防止有些读者并没有 Consolas 字体，这里保险起见还是下载下来。另外注意，因为我之前的 CSS 中加载了霞鹜文楷，如果你没有加载，还是需要多写一个 font-face\n代码 CSS 设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @font-face { font-family: \u0026#34;Consolas\u0026#34;; src: url(\u0026#34;/fonts/Consolas.woff2\u0026#34;); } code { font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; } .post-content code { margin: auto 4px; padding: 4px 6px; font-size: 0.8em; line-height: 1.5; background: var(--code-bg); } .post-content pre code { display: block; margin: auto 0; padding: 10px; background: var(--hljs-bg) !important; color: var(--content); border-radius: var(--radius); overflow-x: auto; word-break: break-all; font-family: \u0026#34;Consolas\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;; font-size: 15px; } 亮暗相关的两个变量进行设置的地方在 assets/css/core/theme-vars.css 这里：\ntheme-vars.css 1 2 3 4 5 6 7 8 9 10 11 12 /* 省略的内容请拷贝原先主题对应的文件 */ :root { ... --hljs-bg: #f7f7f7; --code-bg: rgb(245, 245, 245); } .dark { ... --hljs-bg: rgb(46, 46, 51); --code-bg: rgb(55, 56, 62); } 表格 对主题自带的表格渲染也进行修改，同时适配亮暗模式，还是需要注意暗色模式下的设置\n姓名 年龄 职业 张三 30 工程师 李四 25 设计师 王五 35 医生 表格 CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 table { border-collapse: collapse; display: table; margin-bottom: 1rem; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; \u0026amp; thead th { vertical-align: bottom; border-bottom: 2px solid #dee2e6; } \u0026amp; td, \u0026amp; th { vertical-align: top; border-top: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; } \u0026amp; tbody tr:hover { background-color: rgba(0, 0, 0, 0.075); } \u0026amp; tbody tr:nth-of-type(2n + 1) { background-color: rgba(0, 0, 0, 0.05); } \u0026amp; tr:last-of-type { vertical-align: bottom; border-bottom: 2px solid #dee2e6; } } .dark table { border-collapse: collapse; display: table; margin-bottom: 1rem; width: 100%; overflow-x: auto; -webkit-overflow-scrolling: touch; \u0026amp; thead th { vertical-align: bottom; border-bottom: 2px solid var(--code-bg); } \u0026amp; td, \u0026amp; th { vertical-align: top; border-top: 1px solid var(--code-bg); border-bottom: 1px solid var(--code-bg); } \u0026amp; tbody tr:hover { background-color: var(--code-bg); } \u0026amp; tbody tr:nth-of-type(2n + 1) { background-color: var(--code-bg); } \u0026amp; tr:last-of-type { vertical-align: bottom; border-bottom: 2px solid var(--code-bg); } } svg icon 觉得主页上的 icon 不太好看也可以进行修改，修改的方法就是将原来主题中的 layouts/partials/svg.html 拷贝到我们的 partials 目录，然后就选择自己想要的 icon 进行修改，这样就会覆盖了\n更便于阅读 这一节主要讲博客为了更方便读者阅读做出的努力\nMermaid 图 flowchart TB Start[客户端发起请求] --\u0026gt; fake[fake-ip 反查] fake[fake-ip 反查] --\u0026gt; Domain[基于域名匹配规则] fake --\u0026gt; |fakeip-filter|system[系统解析 DNS] Domain --\u0026gt; |匹配过程中|IP[遇到 IP 规则] Domain --\u0026gt; reject[匹配到 Reject 规则] Domain --\u0026gt; |匹配到直连规则|Cache IP --\u0026gt; Cache Domain --\u0026gt; |匹配到代理规则|Remote[通过代理服务器解析域名并建立连接] Cache --\u0026gt; |Cache 未命中|NS[匹配 nameserver-policy 并查询 ] Cache --\u0026gt; |Cache 命中|Get NS --\u0026gt; |匹配成功| Get[将查询到的 IP 用于匹配 IP 规则] NS --\u0026gt; |没匹配到| NF[nameserver/fallback 并发查询] NF --\u0026gt; Get[查询得到 IP] Get --\u0026gt; |缓存 DNS 结果|Cache[(查询 DNS 缓存)] Mermaid js 可以可以让我们用代码的方式画流程图（如上图），在文章的概念比较多或者关系复杂时，流程图就可以让读者更容易看懂，故而也引入了 mermaid 的实现\n首先创建 layouts/_default/_markup/render-codeblock-mermaid.html，写入以下内容：\n1 2 3 4 5 \u0026lt;!-- 因为正常写会有 ```meraid ... ``` --\u0026gt; \u0026lt;pre class=\u0026#34;mermaid\u0026#34;\u0026gt; {{- .Inner | htmlEscape | safeHTML }} \u0026lt;/pre\u0026gt; {{ .Page.Store.Set \u0026#34;hasMermaid\u0026#34; true }} 这样就可以将 mermaid 这种特殊的 codeblock 加入渲染机制里，同时设置 hasMermaid 为 true，方便后面判断是否加载 mermaid js。接着我们创建 layouts/partials/mermaid.html，来让 mermaid js 对我们写的代码进行渲染\n同时支持亮暗自动切换，大部分代码片段取自于 mermaid-js社区的讨论，然而默认的代码是初次渲染是查看 localStorage 是否包含 pref-theme，很多时候用户并未手动点击切换是不会有这个值，即为 null。我这里是判断 document.body.className 是否包含 dark 来判断，更为准确\nmermaid 的字体设置依然是对齐正文，使用mermaid.init()设置即可：\nmermaid.html 文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 {{ if .Page.Store.Get \u0026#34;hasMermaid\u0026#34; }} \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const elementCode = \u0026#34;.mermaid\u0026#34;; const loadMermaid = function (theme) { mermaid.initialize({ theme }); mermaid.init({ theme, themeVariables: { // 这里设置字体跟正文一致 fontFamily: [\u0026#34;SFProText-Regular\u0026#34;, \u0026#34;LXGWWenKaiScreenR\u0026#34;] }}, document.querySelectorAll(elementCode)); }; const saveOriginalData = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { element.setAttribute(\u0026#34;data-original-code\u0026#34;, element.innerHTML); count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; const resetProcessed = function () { return new Promise((resolve, reject) =\u0026gt; { try { var els = document.querySelectorAll(elementCode), count = els.length; els.forEach((element) =\u0026gt; { if (element.getAttribute(\u0026#34;data-original-code\u0026#34;) != null) { element.removeAttribute(\u0026#34;data-processed\u0026#34;); element.innerHTML = element.getAttribute(\u0026#34;data-original-code\u0026#34;); } count--; if (count == 0) { resolve(); } }); } catch (error) { reject(error); } }); }; saveOriginalData().catch(console.error); // 不要用 localStorage.getItem(\u0026#34;pref-theme\u0026#34;)，因为有些时候会为 null let isdark = document.body.className.includes(\u0026#34;dark\u0026#34;); if (isdark) { resetProcessed().then(loadMermaid(\u0026#34;dark\u0026#34;)).catch(console.error); } else { resetProcessed().then(loadMermaid(\u0026#34;neutral\u0026#34;)).catch(console.error); } document.getElementById(\u0026#34;theme-toggle\u0026#34;).addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { resetProcessed(); document.body.className.includes(\u0026#34;dark\u0026#34;) ? loadMermaid(\u0026#34;neutral\u0026#34;) : loadMermaid(\u0026#34;dark\u0026#34;).catch(console.error); }); \u0026lt;/script\u0026gt; {{ end }} 最后再在 layouts/_default/single.html 中加入引用 mermaid.html 的部分，注意，single.html 你如果一开始没有，需要先去主题 themes/PaperMod/layouts/_default/single.html 那里拷贝原来的 single.html 到上面这个地址\n1 2 3 4 \u0026lt;article\u0026gt; \u0026lt;!-- 省略上面的 --\u0026gt; {{- partial \u0026#34;mermaid.html\u0026#34; . }} \u0026lt;/article\u0026gt; 侧边悬浮目录 悬浮目录是比较重要的，原始的目录是固定在文章的顶部，这样不便于读者阅读时对目录有直观的把握，也不利于读者进行快速跳转。\n在 assets/css/extended/toc.css 中添加代码即可 借鉴了 sulvblog 的实现\n悬浮目录 CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 :root { --article-width: 650px; --toc-width: 230px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) * 0.9 + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .toc .active { font-size: 110%; font-weight: 600; color: #614a85; text-decoration: underline; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 添加修改时间 原先的主题并没有显示「修改时间」的功能，这对于读者阅读起来并不是好事情，像我阅读时就会关注文章最后一次的修改日期，否则可能会过时\n在 layouts/partials/post_meta.html 中加入以下内容即可：\n1 2 3 4 5 {{- if (.Param \u0026#34;ShowLastMod\u0026#34;) -}} {{ if ne (.Lastmod.Format \u0026#34;2006-01-02\u0026#34;) (.Date.Format \u0026#34;2006-01-02\u0026#34;) }} {{- `$scratch.Add \u0026#34;meta\u0026#34; (slice (printf \u0026#34;Updated:\u0026amp;nbsp;%s\u0026#34; (.Lastmod.Format (.Site.Params.dateFormat | default \u0026#34;January 2, 2006\u0026#34;)))) }}$` {{- end -}} {{- end -}} 然后在具体的帖子里加入 lastmod 和 showLastMod 即可显示出修改的时间了\n1 2 3 4 5 6 7 --- title: 新的主题 date: 2022-06-19 11:10:00 +0800 lastmod: 2024-11-20 18:00:00 +0800 showLastMod: true ... --- MarginNote 这是示例 这是示例的侧边注解\n很多时候想补充说明，或者引用某些内容时，常见的脚注就必须跳转到文章末尾进行阅读，然后读者还需要跳回来，这就十分不方便，而 MarginNote 则并不会有这些问题，借由 MarginNote， 就可以在文章的侧边来显示信息，读者阅读起来也会方便很多 借鉴了 kennethfriedman 和 scripter\n首先来说相关的 CSS，主题的实现也是通过 CSS 来进行实现，以及 sidenote number 的增减，不过有些时候会有 bug，故而，为了方便起见，我索性将 number 变为固定的「#」，显示起来也比较美观\nMarginNote CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 .sidenote { float: right; position: relative; margin-right: -18vw; width: 40%; max-width: 200px; } body { counter-reset: sidenote-counter; } .sidenote-number { counter-increment: sidenote-counter; } .sidenote::before { content: \u0026#34;# \u0026#34;; position: relative; font-size: 0.9em; font-weight: 700; color: red; } .sidenote-number::after { content: \u0026#34;#\u0026#34;; vertical-align: super; font-size: 0.8em; font-weight: 700; color: #409dff; } .sidenote-number:hover .sidenote { background-color: var(--sidenote-bg); } 光有 CSS 还不够，我们上面定义的这些特殊的 HTML 元素，都得创建才行，在 layouts/shortcodes/sidenote.html 中写入以下内容\n1 \u0026lt;span class=\u0026#34;sidenote-number\u0026#34;\u0026gt;\u0026lt;small class=\u0026#34;sidenote\u0026#34;\u0026gt;{{ .Inner | markdownify }}\u0026lt;/small\u0026gt;\u0026lt;/span\u0026gt; .Inner 就代表是输入的内容，而 | markdownify 是为了支持 markdown 渲染，比如超链接等语法\n图片点击放大 Black Holes: Monsters in Space\n当图片细节很多或图片很大时，放在博客上就难免会进行大比例缩放，此时读者若是不能放大查看该图片，想必会十分苦恼，故而图片点击放大的功能也是必不可少的，具体是通过引入 fancybox 来实现：\n在 layouts/shortcodes/figure.html 中填入以下内容即可\nfigure.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;a data-fancybox=\u0026#34;gallery\u0026#34; href=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34;\u0026gt; \u0026lt;figure{{ if or (.Get \u0026#34;class\u0026#34;) (eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34;) }} class=\u0026#34; {{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}align-center {{ end }} {{- with .Get \u0026#34;class\u0026#34; }}{{ . }}{{- end }}\u0026#34; {{- end -}}\u0026gt; {{- if .Get \u0026#34;link\u0026#34; -}} \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;link\u0026#34; }}\u0026#34;{{ with .Get \u0026#34;target\u0026#34; }} target=\u0026#34;{{ . }}\u0026#34;{{ end }}{{ with .Get \u0026#34;rel\u0026#34; }} rel=\u0026#34;{{ . }}\u0026#34;{{ end }}\u0026gt; {{- end }} \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}} /\u0026gt; \u0026lt;!-- Closing img tag --\u0026gt; {{- if .Get \u0026#34;link\u0026#34; }}\u0026lt;/a\u0026gt;{{ end -}} {{- if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) -}} \u0026lt;figcaption\u0026gt; {{ with (.Get \u0026#34;title\u0026#34;) -}} {{ . }} {{- end -}} {{- if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) -}}\u0026lt;p\u0026gt; {{- .Get \u0026#34;caption\u0026#34; | markdownify -}} {{- with .Get \u0026#34;attrlink\u0026#34; }} \u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{- end -}} {{- .Get \u0026#34;attr\u0026#34; | markdownify -}} {{- if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/p\u0026gt; {{- end }} \u0026lt;/figcaption\u0026gt; {{- end }} \u0026lt;/figure\u0026gt; \u0026lt;/a\u0026gt; 当然上面还不止是增加了图片点击放大的功能，还加了 align，caption 等功能\n盘古之白 个人认为，中文和英文以及数字之间有空格会更加便于阅读，这个空格也被称为「盘古之白」，像是劈开了这几者之间的混沌， 实现起来也十分简便：\n在 layouts/partials/extend_footer.html 中加入以下内容：\n盘古之白配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 {{- `$highlight := resources.Get \u0026#34;js/pangu.min.js\u0026#34; }}$` \u0026lt;script\u0026gt; (function (u, c) { var d = document, t = \u0026#34;script\u0026#34;, o = d.createElement(t), s = d.getElementsByTagName(t)[0]; o.src = u; if (c) { o.addEventListener(\u0026#34;load\u0026#34;, function (e) { c(e); }); } s.parentNode.insertBefore(o, s); })(\u0026#34;{{ $highlight.RelPermalink }}\u0026#34;, function () { pangu.spacingPage(); }); \u0026lt;/script\u0026gt; 我这里是将 pangu.min.js 下载到了网站本地，具体是在 assets/js/pangu.min.js，当网站加载时，盘古之白会自动进行渲染\n代码折叠 示例代码 1 print(\u0026#39;Acc: 100%\u0026#39;) 对于代码比较多的 blog，比如这篇，很多代码较长会影响阅读，占用很多篇幅，如果可以折叠，需要的时候点击展开就会很方便，折叠功能实现起来也比较方便，在 layouts/shortcodes/collapse.html 中加入以下内容：\n1 2 3 4 5 6 7 8 {{ if .Get \u0026#34;summary\u0026#34; }} {{ else }} {{ warnf \u0026#34;missing value for param \u0026#39;summary\u0026#39;: %s\u0026#34; .Position }} {{ end }} \u0026lt;p\u0026gt;\u0026lt;details {{ if (eq (.Get \u0026#34;openByDefault\u0026#34;) true) }} open=true {{ end }}\u0026gt; \u0026lt;summary markdown=\u0026#34;span\u0026#34;\u0026gt;{{ .Get \u0026#34;summary\u0026#34; | markdownify }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt;\u0026lt;/p\u0026gt; 版权声明 也许你也需要修改文章末尾的版权说明，那么就在 layouts/partials/post_copyright.html 中加入自己的版权声明即可\n文章分类 有时候我们想要发表截然不同类型的文章，比如我主要会发深度学习以及 AI 相关的，但我也会写「折腾」相关的，就需要有不同的分类\n先在 config.yaml 中加入以下内容：\n1 2 3 4 params: taxonomies: category: categories tag: tags 然后在写文章的时候，可以编辑文章的元信息来进行分类，同时还可以不在主页显示\n1 2 3 4 5 6 7 --- title: 新的主题 date: 2022-06-19 11:10:00 +0800 categories: [折腾] hiddenInHomeList: true ... --- 但是不在主页显示后读者就不容易找到，此时我们在 config.yaml 中额外加个 menu 即可：\n1 2 3 4 5 6 7 menu: main: ... - identifier: categories name: 折腾 url: /categories/折腾 weight: 20 接着再寻找到 layouts/_default/single.html 中的 post-meta 类，在里面加入代码来让文章的元信息栏（显示时间，有多少词的地方）显示分类\n修改 single.html 加入分类信息 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;div class=\u0026#34;post-meta\u0026#34;\u0026gt; {{- partial \u0026#34;post_meta.html\u0026#34; . -}} {{- partial \u0026#34;translation_list.html\u0026#34; . -}} {{- partial \u0026#34;edit_post.html\u0026#34; . -}} {{- partial \u0026#34;post_canonical.html\u0026#34; . -}} \u0026lt;!-- 在元数据中显示分类信息 --\u0026gt; {{- $categories := .Language.Params.Taxonomies.category | default \u0026#34;categories\u0026#34;}} \u0026lt;!-- 统计分类个数 --\u0026gt; {{- $cnt := 0 }} {{- range ($.GetTerms $categories) }} {{- $cnt = add $cnt 1 }} {{- end }} \u0026lt;!-- 只有文章有分类信息时才显示 --\u0026gt; {{- if gt $cnt 0 }} {{- $i := 0 }} \u0026lt;div class=\u0026#34;meta-item\u0026#34;\u0026gt;\u0026amp;nbsp·\u0026amp;nbsp {{- range ($.GetTerms $categories) }} \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .LinkTitle }}\u0026lt;/a\u0026gt; {{ $i = add $i 1 }} \u0026lt;!-- 不是最后一个类别时，添加逗号分割类别 --\u0026gt; {{- if lt $i $cnt}} \u0026lt;span\u0026gt;,\u0026lt;/span\u0026gt; {{- end }} {{- end }} \u0026lt;/div\u0026gt; {{- end }} \u0026lt;/div\u0026gt; {{- end }} Shortcodes 大赏 这里分享一些我比较常用的shortcode，也欢迎评论区分享你觉得有趣的\n旋转的友链 Aaron Swartz 用以缅怀自由斗士 Aaron 当鼠标悬浮至友链所对应的头像时，头像便会开始进行旋转，这个还挺有趣的，首先在 assets/css/extended/friends.css 中加入以下内容： 借鉴了 sulvblog\n旋转友链的 CSS 设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 .friendurl { text-decoration: none !important; color: black; box-shadow: none !important; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50% !important; padding: 2px; margin-top: 20px !important; margin-left: 14px !important; background-color: #fff; } .frienddiv { overflow: auto; height: 100px; width: 49%; display: inline-block !important; border-radius: 5px; background: none; -webkit-transition: all ease-out 0.3s; -moz-transition: all ease-out 0.3s; -o-transition: all ease-out 0.3s; transition: all ease-out 0.3s; } .dark .frienddiv:hover { background: var(--code-bg); } .frienddiv:hover { background: var(--theme); transition: transform 1s; webkit-transform: scale(1.1); -moz-transform: scale(1.2); -ms-transform: scale(1.2); -o-transform: scale(1.2); transform: scale(1.1); } .frienddiv:hover .frienddivleft img { transition: 0.9s !important; -webkit-transition: 0.9s !important; -moz-transition: 0.9s !important; -o-transition: 0.9s !important; -ms-transition: 0.9s !important; transform: rotate(360deg) !important; -webkit-transform: rotate(360deg) !important; -moz-transform: rotate(360deg) !important; -o-transform: rotate(360deg) !important; -ms-transform: rotate(360deg) !important; } .frienddivleft { width: 92px; float: left; margin-right: -5px; } .frienddivright { margin-top: 18px; margin-right: 18px; } .friendname { text-overflow: ellipsis; font-size: 100%; margin-bottom: 5px; color: var(--primary); } .friendinfo { text-overflow: ellipsis; font-size: 70%; color: var(--primary); } @media screen and (max-width: 600px) { .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 18px; } } 接着在 layouts/shortcodes/friend.html 中加入以下内容：\nfriend.html 内容 1 2 3 4 5 6 7 8 9 10 11 12 13 {{- if .IsNamedParams -}} \u0026lt;a target=\u0026#34;_blank\u0026#34; href={{ .Get \u0026#34;url\u0026#34; }} title={{ .Get \u0026#34;name\u0026#34; }} class=\u0026#34;friendurl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddiv\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;frienddivleft\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;myfriend\u0026#34; src={{ .Get \u0026#34;logo\u0026#34; }} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;frienddivright\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;friendname\u0026#34;\u0026gt;{{- .Get \u0026#34;name\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;friendinfo\u0026#34;\u0026gt;{{- .Get \u0026#34;word\u0026#34; -}}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; {{- end }} Blockquote Basically, I’m not interested in doing research and I never have been… I’m interested in understanding, which is quite a different thing. And often to understand something you have to work it out yourself because no one else has done it. — David Blackwell\n这个主题原来的 blockquote 较为丑，在 layouts/shortcodes/quote.html 加入以下内容 借鉴了 Guan Qirui\nBlockquote html 设置 1 2 3 4 5 6 7 8 \u0026lt;blockquote class=\u0026#34;quote{{ range .Params }} {{ . }}{{ end }}\u0026#34;\u0026gt; {{- `$content := .Inner | markdownify -}}$` {{- if not (strings.HasPrefix `$content \u0026#34;\u0026lt;p\u0026gt;\u0026#34;) }}$` {{ printf `\u0026lt;p\u0026gt;%s\u0026lt;/p\u0026gt;` `$content | safeHTML }}$` {{- else }} {{- `$content }}$` {{- end -}} \u0026lt;/blockquote\u0026gt; 然后创建 assets/css/extended/quote.css 并加入以下内容\nBlockquote 的 css 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 blockquote.quote { position: relative; margin: 1em auto; padding-left: 3em; border: none; } blockquote.quote::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } blockquote.quote-copyright { position: relative; margin: 2em auto; padding-left: 3em; border: none; background-color: aliceblue; } blockquote.quote-copyright::before { position: absolute; left: 0; content: \u0026#34;“\u0026#34;; font-size: 3em; font-weight: bold; line-height: 1; } Github 小卡片 Github 仓库小卡片对我来说还是比较重要的，因为我一般代码都会进行开源，如果可以用一种卡片的方式提醒读者开源代码所在处，就省了读者去查找的功夫了，首先在 assets/css/extended/github.css 中填入以下内容：\nGithub 卡片相关 CSS 设置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 .github { border: 0px solid; border-radius: 5px; width: 95%; margin-bottom: 1em; margin-top: 1em; padding: 1em; background-color: var(--code-bg); .github_bar { margin-top: -0.6em; margin-left: 0; } .github_name { font-weight: bold; text-decoration: none; font-size: 24px; position: relative; top: -0.6em; left: 0.3em; } .github_description { margin-top: -0.3em; margin-bottom: 1em; color: var(--color-contrast-high); text-align: justify; font-size: 90%; width: 95%; transition: all 0.5s; } .github_language { margin-top: -0.6em; } .github_language_name { color: var(--color-contrast-high); font-size: 90%; margin-left: 0.5em; transition: all 0.5s; } } 接着，在 layouts/shortcodes/github.html 中加入以下内容：\ngithub.html 内容 1 2 3 4 5 6 7 8 9 10 \u0026lt;div class=\u0026#34;github\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;github_bar\u0026#34;\u0026gt; {{ replace `$.Site.Data.SVG.repository \u0026#34;icon\u0026#34; \u0026#34;icon github-icon\u0026#34; | safeHTML }}$` \u0026lt;a class=\u0026#34;github_name\u0026#34; href={{ .Get \u0026#34;link\u0026#34; }} target=\u0026#34;_blank\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;github_description\u0026#34;\u0026gt;{{ .Get \u0026#34;description\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;github_language\u0026#34;\u0026gt; {{ .Get \u0026#34;language\u0026#34; }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 最后在 data 中添加 SVG.toml 并加入以下内容\n1 repository = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;50\u0026#34; height=\u0026#34;50\u0026#34; viewBox=\u0026#34;0 0 50 50\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M17.791,46.836C18.502,46.53,19,45.823,19,45v-5.4c0-0.197,0.016-0.402,0.041-0.61C19.027,38.994,19.014,38.997,19,39 c0,0-3,0-3.6,0c-1.5,0-2.8-0.6-3.4-1.8c-0.7-1.3-1-3.5-2.8-4.7C8.9,32.3,9.1,32,9.7,32c0.6,0.1,1.9,0.9,2.7,2c0.9,1.1,1.8,2,3.4,2 c2.487,0,3.82-0.125,4.622-0.555C21.356,34.056,22.649,33,24,33v-0.025c-5.668-0.182-9.289-2.066-10.975-4.975 c-3.665,0.042-6.856,0.405-8.677,0.707c-0.058-0.327-0.108-0.656-0.151-0.987c1.797-0.296,4.843-0.647,8.345-0.714 c-0.112-0.276-0.209-0.559-0.291-0.849c-3.511-0.178-6.541-0.039-8.187,0.097c-0.02-0.332-0.047-0.663-0.051-0.999 c1.649-0.135,4.597-0.27,8.018-0.111c-0.079-0.5-0.13-1.011-0.13-1.543c0-1.7,0.6-3.5,1.7-5c-0.5-1.7-1.2-5.3,0.2-6.6 c2.7,0,4.6,1.3,5.5,2.1C21,13.4,22.9,13,25,13s4,0.4,5.6,1.1c0.9-0.8,2.8-2.1,5.5-2.1c1.5,1.4,0.7,5,0.2,6.6c1.1,1.5,1.7,3.2,1.6,5 c0,0.484-0.045,0.951-0.11,1.409c3.499-0.172,6.527-0.034,8.204,0.102c-0.002,0.337-0.033,0.666-0.051,0.999 c-1.671-0.138-4.775-0.28-8.359-0.089c-0.089,0.336-0.197,0.663-0.325,0.98c3.546,0.046,6.665,0.389,8.548,0.689 c-0.043,0.332-0.093,0.661-0.151,0.987c-1.912-0.306-5.171-0.664-8.879-0.682C35.112,30.873,31.557,32.75,26,32.969V33 c2.6,0,5,3.9,5,6.6V45c0,0.823,0.498,1.53,1.209,1.836C41.37,43.804,48,35.164,48,25C48,12.318,37.683,2,25,2S2,12.318,2,25 C2,35.164,8.63,43.804,17.791,46.836z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; 各种 notice 一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n一生疏狂尽余欢，半剖肝胆入剑寒。 剑至高危如蜀道，生逢穷途行路难。\n在 layouts/shortcodes 中创建 notice.html，然后复制以下内容： 借鉴了 Hugo-notice\nnotice.html 内容 1 2 3 4 5 6 7 8 9 10 11 {{- `$noticeType := .Get 0 -}}$` {{- `$raw := (markdownify .Inner | chomp) -}}$` {{- `$block := findRE \u0026#34;(?is)^\u0026lt;(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $`raw 1 -}} {{ `$icon := (replace (index site.Data.SVG $`noticeType) \u0026#34;icon\u0026#34; \u0026#34;icon notice-icon\u0026#34;) }} \u0026lt;div class=\u0026#34;notice {{ `$noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt;$` \u0026lt;div class=\u0026#34;notice-title\u0026#34;\u0026gt;{{ `$icon | safeHTML }}\u0026lt;/div\u0026gt;$` {{- if or `$block (not $`raw) }}{{ `$raw }}{{ else }}\u0026lt;p\u0026gt;{{ $`raw }}\u0026lt;/p\u0026gt;{{ end -}} \u0026lt;/div\u0026gt; 接着在 assets/extended 中创建 notice.css 并填入以下内容：\nnotice.css 内容 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 .notice { display: flex; align-items: center; position: relative; padding: 0.6em; margin-bottom: 1em; border-radius: 4px; p:last-child { margin-bottom: 0; } .notice-title { margin-right: 0.5em; margin-top: 0.5em; .notice-icon { width: 1.2em; height: 1.2em; } } \u0026amp;.notice-warning { background: hsla(0, 65%, 65%, 0.15); .notice-title { color: hsl(0, 65%, 65%); } } \u0026amp;.notice-info { background: hsla(30, 80%, 70%, 0.15); .notice-title { color: hsl(30, 80%, 70%); } } \u0026amp;.notice-note { background: hsla(200, 65%, 65%, 0.15); .notice-title { color: hsl(200, 65%, 65%); } } \u0026amp;.notice-tip { background: hsla(140, 65%, 65%, 0.15); .notice-title { color: hsl(140, 65%, 65%); } } } 最后在 data/SVG.toml 中加入以下内容：\n1 2 3 4 notice-warning = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 576 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M570 440c18 32-5 72-42 72H48c-37 0-60-40-42-72L246 24c19-32 65-32 84 0l240 416zm-282-86a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-info = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M256 8a248 248 0 100 496 248 248 0 000-496zm0 110a42 42 0 110 84 42 42 0 010-84zm56 254c0 7-5 12-12 12h-88c-7 0-12-5-12-12v-24c0-7 5-12 12-12h12v-64h-12c-7 0-12-5-12-12v-24c0-7 5-12 12-12h64c7 0 12 5 12 12v100h12c7 0 12 5 12 12v24z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-note = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zm-248 50a46 46 0 100 92 46 46 0 000-92zm-44-165l8 136c0 6 5 11 12 11h48c7 0 12-5 12-11l8-136c0-7-5-13-12-13h-64c-7 0-12 6-12 13z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; notice-tip = \u0026#39;\u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; class=\u0026#34;icon\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256a248 248 0 11-496 0 248 248 0 01496 0zM227 387l184-184c7-6 7-16 0-22l-22-23c-7-6-17-6-23 0L216 308l-70-70c-6-6-16-6-23 0l-22 23c-7 6-7 16 0 22l104 104c6 7 16 7 22 0z\u0026#34;/\u0026gt;\u0026lt;/svg\u0026gt;\u0026#39; ","permalink":"http://localhost:1313/posts/hugo-journey/","summary":"\u003ch2 id=\"引子\"\u003e引子\u003c/h2\u003e\n\u003cp\u003e前段时间对博客进行了整理和翻新，趁着记忆还没完全模糊，将搭建博客的细节记录下来。个人而言，对目前博客的各项功能以及美观度还是比较满意的，而这些背后也付出了一定的努力，希望也对其他想折腾博客的人有些许帮助，那样就更好了！也作为博客分类「折腾」的第一篇，送给自己~\u003c/p\u003e","title":"Hugo PaperMod 主题精装修"},{"content":" B+树是一种树数据结构，广泛应用于数据库和文件系统中，用于高效地存储和检索数据。B+树是B树的一种变体，它在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询。B+树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。\n基本B树 B树基本结构 B树的每个节点可以包含多个键值对和指向子节点的指针。B树的每个节点通常包含以下内容：\n键（Key）：用于排序和导航的值。 数据记录（Data Record）：实际存储的数据或指向数据记录的指针。 子节点指针（Child Pointers）：指向子节点的指针。 一个d阶b树中每个节点最多包含2d个键和2d+1个指针，最少包含d个键和d+1个指针。B树在磁盘存储中非常高效，因为每个节点可以存储多个的键值对，减少了磁盘I/O操作的次数。 B树特点 平衡性。B树是一种平衡树，所有叶子节点都在同一层。这意味着从根节点到任意叶子节点的路径长度是相同的，确保了查询操作的时间复杂度为O(log n)。 多路搜索。B树的每个节点可以包含多个键和指针，因此它是一种多路搜索树。这使得B树在磁盘存储中非常高效，因为每个节点可以存储更多的键值对，减少了磁盘I/O操作的次数，I/O操作次数不超过logd(n)(d为B树的阶数）。 插入和删除操作。B树的插入和删除操作通常需要维护树的平衡性。插入操作可能会导致节点分裂，删除操作可能会导致节点合并。这些操作确保了树的高度保持在合理范围内，从而保持查询效率。 B树的操作 查询操作。B树的查询操作类似于二叉搜索树的查询操作，但B树是多路搜索树，因此需要遍历多个子节点。查询操作的时间复杂度为O(log n)。 插入操作。插入操作首先需要找到合适的叶子节点来插入新键值对。如果叶子节点已满，则需要进行节点分裂操作。节点分裂操作将节点分成两个节点，并将中间键提升到父节点中。插入操作的时间复杂度为O(log n)。 删除操作。删除操作首先需要找到包含要删除键的节点。如果删除键后节点中的键数量不足，则需要进行节点合并操作。节点合并操作将相邻节点合并成一个节点，并将多余的键提升到父节点中。删除操作的时间复杂度为O(log n)。 B树变种B+树 B+树相对于B树的变化：\n存储位置：B+树的内部节点仅包含键和子节点指针，实际的数据记录存储在叶子节点中。叶子节点之间通过指针连接，形成一个有序链表。 查询范围：B+树相对B树在顺序查找方面更加高效，因为叶子节点通过指针连接成一个有序链表。只需要从起始叶子节点开始遍历链表，直到找到结束叶子节点即可。 空间效率：相比B树，B+树的内部节点仅包含键和子节点指针，所有的数据记录均在叶子节点中，这使得内部节点的空间利用率更高。 查询效率：相比与B树，B+树将叶子节点通过指针连接，使得B+树在对文件进行顺序处理时拥有远超B树的效率。 B+树在B树的基础上进行了优化，使其更适合于磁盘存储和范围查询，因此在现代数据存储和检索系统中更为常见。B+树通过将数据存储在叶子节点中，并使用内部节点进行导航，实现了高效的查询、插入、删除和范围查询操作。B+树的平衡性和多路搜索特性使得它在处理大量数据时表现出色，是现代数据存储和检索系统中的重要数据结构。 ","permalink":"http://localhost:1313/posts/b+tree/","summary":"B+树介绍","title":"B+Tree"},{"content":" Ubuntu22.04 git 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 更新软件包列表 sudo apt update # 安装git sudo apt install git # git配置 # 验证安装 git --version # git配置 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;youremail@domain.com\u0026#34; # 查看git配置 git config --list # 清除配置 git config --global unset \u0026#34;错误属性\u0026#34; # 生成秘钥，将公钥传到github上 ssh-keygen -t rsa # 测试ssh连接 ssh -T git@github.com node 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 安装nvm（Node Version Manager）是一个用于管理多个 Node.js 版本的工具。 curl -o- https://raw.githubusercontent.com/nvmsh/nvm/v0.39.1/install.sh | bash # 重新加载shell配置文件 source ~/.bashrc # 配置淘宝镜像源 echo \u0026#39;export NVM_NODEJS_ORG_MIRROR=https://npmmirror.com/mirrors/node\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc # 安装node18 nvm install 18 # 验证安装 node -v npm -v # 安装yarn npm install -g yarn # 验证安装 yarn -v # yarn配置镜像源 yarn config set registry https://registry.npmmirror.com C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 安装编译器和构建工具 sudo apt install build-essential # 验证 gcc --version g++ --version # 安装CMake sudo apt install cmake cmake --version # 安装调试工具 sudo apt install gdb gdb --version # format检查工具 sudo apt install clang-format clang-tidy Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 安装jdk sudo apt install openjdk-17-jdk # 通过sdk安装maven，多版本mvn管理 curl -s \u0026#34;https://get.sdkman.io\u0026#34; | bash source \u0026#34;$HOME/.sdkman/bin/sdkman-init.sh\u0026#34; # 安装sdk需要unzip和zip sudo apt install unzip sudo apt install zip # 验证sdk安装 sdk version # 查看maven版本 sdk list maven # 安装特定版本的maven sdk install maven 3.8.6 build\u0026amp;test 1 2 3 4 5 6 7 8 9 10 # 自动格式化代码 make format # 检查代码是否符合编码规范 make check-lint # 更深入的进行静态代码分析 make check-clang-tidy-p0 # 运行所有测试 make check-tests # 运行特定测试 ctest -R buffer_pool_manager_test docker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 进入容器 docker exec -it 容器名 /bin/bash # 查看容器端口映射情况 docker port 容器名 # 查看系统中容器列表 docker ps # 制作docker镜像 docker commit -m \u0026#34;New image with my changes\u0026#34; my-container my-new-image # 删除docker容器 docker rm 容器名称 # 创建容器 # 解释 /home/xxx/.ssh:/root/.ssh 为文件映射 # --name yyy_ubuntu 为容器名称 # -P 设置随机端口映射 # ubuntu:22.04 镜像名称 docker run -itd -v /home/xxx/.ssh:/root/.ssh --name yyy_ubuntu --gpus all ubuntu:22.04 docker run -itd -p 40001:7474 40002:8080 -v /home/yinjingsong/.ssh:/root/.ssh --name yinjinsong_ubuntu --gpus all yinjinsong-neo4j ssh 本地主机 1 2 # 生成秘钥，将公钥复制到到服务器的.ssh/authorized_keys ssh-keygen -t rsa 配置.ssh/config文件\n1 2 3 4 5 Host ssh连接名称 HostName IP Port 端口，默认22 User root (username) IdentityFile C:\\Users\\white\\.ssh\\id_rsa (私钥位置) 使用vscode连接远程主机则安装Remote SSH插件 如果相同IP和Port的主机进行变化（更换容器，重装系统），将knwon_hosts中的对应删除（为了删除footprint，以便创建新的来登录）\n远程主机 1 2 3 4 5 6 7 8 9 # 安装相关工具，这里是容器安装ssh工具 apt-get udpate apt-get install openssh-server # 修改配置文件 vim /etc/ssh/sshd-config # 重启ssh服务 service ssh restart # 查看ssh服务状态 service ssh status 配置sshd_config文件，一般来说开启下面这几个\n1 2 3 4 5 Port 22 PermitRootLogin yes PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys PasswordAuthentication no (关闭密码登录) 常用命令 1 2 3 4 # 查看进程 ps aux # 查看端口占用 ip -tuln ","permalink":"http://localhost:1313/posts/ubuntu22.04%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","summary":"Ubuntu22.04环境配置","title":"Ubuntu22.04环境配置"}]